<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿叩·杂记</title>
  
  <subtitle>学着写博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zyouwei.com/"/>
  <updated>2018-01-15T09:58:12.915Z</updated>
  <id>http://zyouwei.com/</id>
  
  <author>
    <name>Angus_Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RocketMQ Performance Test</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/RocketMQ-Performance-Test.html"/>
    <id>http://zyouwei.com/技术笔记/Java/RocketMQ-Performance-Test.html</id>
    <published>2018-01-15T07:45:23.000Z</published>
    <updated>2018-01-15T09:58:12.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><table><thead><tr><th>硬件配置</th><th>4C 4G SSD</th></tr></thead><tbody><tr><td>操作系统</td><td>centeOS 6.5</td></tr><tr><td>MQ版本</td><td>rocketmq-broker-4.2.0-incubating-SNAPSHOT （2017-08-23）</td></tr></tbody></table><p>测试程序运行机器：Macbook Pro i7 2.3GHz, 16G</p><a id="more"></a><h2 id="单Broker场景"><a href="#单Broker场景" class="headerlink" title="单Broker场景"></a>单Broker场景</h2><h3 id="单broker同步发送（单发送进程），每条message大小：30bytes"><a href="#单broker同步发送（单发送进程），每条message大小：30bytes" class="headerlink" title="单broker同步发送（单发送进程），每条message大小：30bytes"></a>单broker同步发送（单发送进程），每条message大小：30bytes</h3><p>NameServer与Broker分别在不同机器部署，broker采用异步持久化</p><pre><code>topic设置：    perm: 6JVM设置：    NameServer: -Xms1g -Xmx1g -Xmn512m    Broker: -Xms2g -Xmx2g -Xmn1g</code></pre><table><thead><tr><th>发送条数</th><th>成功率</th><th>耗时（s)</th><th>发送速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>100000</td><td>100%</td><td>74.265</td><td>1346.52</td><td>写queue数量：4</td></tr><tr><td>100000</td><td>100%</td><td>75.347</td><td>1327.22</td><td>写queue数量：8</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><p>成功率非常有保证，调整topic的queue数量并不能提升发送速率。broker的能力并没有完全被发挥出来，CPU非常闲。</p></blockquote><h3 id="单broker异步发送（单发送进程），每条message大小：30bytes"><a href="#单broker异步发送（单发送进程），每条message大小：30bytes" class="headerlink" title="单broker异步发送（单发送进程），每条message大小：30bytes"></a>单broker异步发送（单发送进程），每条message大小：30bytes</h3><p>NameServer与Broker分别在不同机器部署，broker采用异步持久化</p><pre><code>topic设置：    perm: 6JVM设置：    NameServer： -Xms1g -Xmx1g -Xmn512m    Broker:    -Xms2g -Xmx2g -Xmn1g</code></pre><table><thead><tr><th>发送条数</th><th>成功率</th><th>耗时（s)</th><th>发送速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>1000000</td><td>100%</td><td>33.420</td><td>29922.20</td><td>写queue数量：4，每发送37条休眠一毫秒，限制生产者速度不超过37000条/秒</td></tr><tr><td>1000000</td><td>96.6024%</td><td>20.871</td><td>46285.46</td><td>写queue数量：4，发送端不限速</td></tr><tr><td>1000000</td><td>100%</td><td>33.477</td><td>29871.25</td><td>写queue数量：8，每发送37条休眠一毫秒，限制生产者速度不超过37000条/秒</td></tr><tr><td>1000000</td><td>97.9327%</td><td>22.961</td><td>48844.23</td><td>写queue数量：8，发送端不限速</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><ol><li>吞吐量较大时，会触发broker端的流控限制，会导致消息发送失败，出现异常：<code>Rocketmq:MQBrokerException: CODE: 2 DESC: [TIMEOUT_CLEAN_QUEUE]</code>。</li><li>通过多次反复测试，发现在保证发送成功率<code>100%</code>的情况下，发送速率最大为<code>29922.20条/秒</code>，测试过程中，测试程序最大上传网速达到<code>15.9MB/s</code>。</li><li>在成功率<code>100%</code>的情况下，吞吐量是同步发送的超<code>20</code>倍。不限速（允许少量失败）的情况下，吞吐量是同步发送的超<code>34</code>倍。</li><li>在单发送进程场景下，增加topic的queue数量并不能提升生产速率。</li></ol><p>发现的问题（或BUG）</p><p>测试发现<code>producer.shutdown()</code>时，并没有完全等待<code>SendCallBack</code>执行完就退出，可能会导致有部分callback无法接收到。因此在在测试程序异步发送完成之后，还需要添加一个线程休眠，确保全部消息全部发送到broker。</p></blockquote><h3 id="单broker消费（单消费进程），每条message大小：30bytes"><a href="#单broker消费（单消费进程），每条message大小：30bytes" class="headerlink" title="单broker消费（单消费进程），每条message大小：30bytes"></a>单broker消费（单消费进程），每条message大小：30bytes</h3><p>NameServer与Broker分别在不同机器部署</p><pre><code>topic设置：    perm: 6JVM设置：    NameServer： -Xms1g -Xmx1g -Xmn512m    Broker:    -Xms2g -Xmx2g -Xmn1gconsumer设置：    consumeThreadMax: 64    pullBatchSize: 32</code></pre><table><thead><tr><th>消费条数</th><th>成功率</th><th>耗时（s)</th><th>消费速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>3000000</td><td>100%</td><td>21.353</td><td>140495.48</td><td>读queue数量：8</td></tr><tr><td>3000000</td><td>100%</td><td>34.371</td><td>87282.88</td><td>读queue数量：4</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><ol><li>RocketMQ的消息消费能力非常高，只要消费端的业务处理足够快。单broker的消费超过<code>7w条每秒</code>，基本上可以说满足大部分的实际业务场景。</li><li>增加topic的queue数量，能明显提高消费速率。（前提是生产的消息要平均分布在各个queue）</li><li>从测试环境看，消费高峰每秒下载流量超过<code>31MB</code>，Broker的CPU会占用维持在<code>50%</code>左右，消费过程中CPU的IOWait在某一瞬间会超过<code>20%</code>。</li></ol></blockquote><h3 id="单broker消费（双消费进程），每条message大小：30bytes"><a href="#单broker消费（双消费进程），每条message大小：30bytes" class="headerlink" title="单broker消费（双消费进程），每条message大小：30bytes"></a>单broker消费（双消费进程），每条message大小：30bytes</h3><p>NameServer与Broker分别在不同机器部署</p><pre><code>topic设置：    读队列数量：4    写队列数量：4    perm: 6JVM设置：    NameServer： -Xms1g -Xmx1g -Xmn512m    Broker:    -Xms2g -Xmx2g -Xmn1gconsumer设置：    consumeThreadMax: 64    pullBatchSize: 32</code></pre><table><thead><tr><th></th><th>消费条数</th><th>成功率</th><th>耗时（s)</th><th>消费速率（条/秒）</th></tr></thead><tbody><tr><td>消费进程 1</td><td>1000000</td><td>100%</td><td>22.549</td><td>44347.86</td></tr><tr><td>消费进程2</td><td>1000000</td><td>100%</td><td>21.360</td><td>46796.76</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><p>增加消费者进程并不能提高整体的消费速度，因为消费者本身就是多线程的模式消费。但可以通过增加消费者进程来提升消费端高可用能力，避免消费端的单点故障。</p></blockquote><h2 id="多Master-Broker场景"><a href="#多Master-Broker场景" class="headerlink" title="多Master Broker场景"></a>多Master Broker场景</h2><h3 id="双Master-Broker-同步发送，每条message大小：30bytes"><a href="#双Master-Broker-同步发送，每条message大小：30bytes" class="headerlink" title="双Master Broker 同步发送，每条message大小：30bytes"></a>双Master Broker 同步发送，每条message大小：30bytes</h3><p>三台主机，一台部署NameServer，另外两台各部署Broker master</p><pre><code>topic设置：    perm: 6JVM设置：    NameServer: -Xms1g -Xmx1g -Xmn512m    Broker: -Xms2g -Xmx2g -Xmn1g</code></pre><table><thead><tr><th>发送条数</th><th>成功率</th><th>耗时（s)</th><th>发送速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>100000</td><td>100%</td><td>66.845</td><td>1495.99</td><td>每个broker4个queue</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><p>同步发送速率双Master Borker与单broker基本在一个数量级 双Master Broker 异步发送（单发送进程），每条message大小：30bytes</p></blockquote><h3 id="三台主机，一台部署NameServer，另外两台各部署Broker-master"><a href="#三台主机，一台部署NameServer，另外两台各部署Broker-master" class="headerlink" title="三台主机，一台部署NameServer，另外两台各部署Broker master"></a>三台主机，一台部署NameServer，另外两台各部署Broker master</h3><pre><code>topic设置：    perm: 6JVM设置：    NameServer: -Xms1g -Xmx1g -Xmn512m    Broker: -Xms2g -Xmx2g -Xmn1gBroker设置：    为提高成功率，将waitTimeMillsInSendQueue的默认值从200调整到1000</code></pre><table><thead><tr><th>发送条数</th><th>成功率</th><th>耗时（s)</th><th>发送速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>1000000</td><td>100%</td><td>20.862</td><td>47934.04</td><td>每个broker各4个queue， 每发送70条休眠1毫秒，确保每秒发送数量不超过7w条</td></tr><tr><td>1000000</td><td>100%</td><td>20.616</td><td>48506.01</td><td>每个broker各8个queue， 每发送70条休眠1毫秒，确保每秒发送数量不超过7w条</td></tr><tr><td>1000000</td><td>99.7571%</td><td>16.026</td><td>62247.03</td><td>每个broker各4个queue，生产者不限速</td></tr><tr><td>1000000</td><td>99.8807%</td><td>17.108</td><td>58,382.45</td><td>每个broker各8个queue，生产者不限速</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><ol><li>在保证成功率100%的情况下，双master broker比单broker的发送速率明显提高，提升超<code>60%</code>。</li><li>增加topic的queue数量，但发送进程并不能提高发送速率</li></ol></blockquote><p>双broker消费（单消费进程），每条message大小：30bytes</p><h3 id="三台主机，一台部署NameServer，另外两台各部署Broker-master-1"><a href="#三台主机，一台部署NameServer，另外两台各部署Broker-master-1" class="headerlink" title="三台主机，一台部署NameServer，另外两台各部署Broker master"></a>三台主机，一台部署NameServer，另外两台各部署Broker master</h3><pre><code>topic设置：    perm: 6JVM设置：    NameServer： -Xms1g -Xmx1g -Xmn512m    Broker:    -Xms2g -Xmx2g -Xmn1gconsumer设置：    consumeThreadMax: 64    pullBatchSize: 32</code></pre><table><thead><tr><th>消费条数</th><th>成功率</th><th>耗时（s)</th><th>消费速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>2000000</td><td>100%</td><td>11.170</td><td>179051.02</td><td>读queue数量：4</td></tr><tr><td>3000000</td><td>100%</td><td>11.979</td><td>250438.26</td><td>读queue数量：8</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><ol><li>由于topic在每个broker上都有4个queue，发送的消息基本是均匀分配在两个broker的，因此在消费时能从两个broker分别进行消费，消费速率较单broker的消费提升了近1倍。</li><li>增大topic的queue数量，明显能提高消费速率。</li></ol></blockquote><h3 id="双Master双Slave异步复制，异步发送，每条message大小：30bytes"><a href="#双Master双Slave异步复制，异步发送，每条message大小：30bytes" class="headerlink" title="双Master双Slave异步复制，异步发送，每条message大小：30bytes"></a>双Master双Slave异步复制，异步发送，每条message大小：30bytes</h3><p>五台主机，一台部署NameServer，两台分别部署broker-a-master、broker-a-slave，两台分别部署broker-b-master、broker-b-slave。</p><pre><code>topic设置：    perm: 6JVM设置：    NameServer: -Xms1g -Xmx1g -Xmn512m    Broker: -Xms2g -Xmx2g -Xmn1gBroker设置：    master broker设置: brokerRole=ASYNC_MASTER</code></pre><table><thead><tr><th>发送条数</th><th>成功率</th><th>耗时（s)</th><th>发送速率（条/秒）</th><th>备注</th></tr></thead><tbody><tr><td>100000</td><td>100%</td><td>20.755</td><td>48181.16</td><td>每个broker各8个queue，每发送70条休眠1毫秒，确保每秒发送数量不超过7w条</td></tr></tbody></table><blockquote><p><strong>结论</strong></p><ol><li>Master与Slave采用异步复制时，基本不影响消息发送的吞吐量。</li><li>发送100w条消息到broker后（平均分配到broker-a与broker-b），关掉broker-b-master，启动消费者时，如果订阅组之前不存在，则不能从broker-b-slave上进行消费。如果订阅组存在，则能从broker-b-slave上进行消费，但当broker-b-master恢复之后，会重复消费broker-b-master上的消息。</li></ol><p>发现的问题（或BUG）</p><p>在slave上进行消费时，消费的offset近保存到了slave上，当master恢复时，slave上的消费offset并没有被同步到master上，master上的offset还是最初在master上的消费位置，因此会导致master故障期间从slave上消费的消息会被重复消费。这应该不是RocketMQ的设计初衷，感觉像是个bug。</p></blockquote><h2 id="RocketMQ-vs-Kafka"><a href="#RocketMQ-vs-Kafka" class="headerlink" title="RocketMQ vs Kafka"></a>RocketMQ vs Kafka</h2><ol><li>RocketMQ与Kafka一样，都没有JMS中定义的Queue的存在，只有Topic的存在。但他们都可以基于Topic来实现Queue的功能与特性。</li><li>RocketMQ可以创建只有1个queue的topic，再结合Cluster的消费方式来实现JMS queue的功能与特性。</li><li>Kafka则可以创建只有一个partition的topic来实现JMS Queue的功能与特性。</li><li>RocketMQ中queue的概念可类比为Kafka中的partition，若要实现消息的强顺序消费，RocketMQ需要设置topic只有一个queue，Kafka则需要设置topic只有一个partition。</li><li>若业务规定只需保证同一订单编号的状态变更的顺序性，RocketMQ可以在发送时通过订单编号与MessageQueueSelector来实现同一编号的订单消息放置在topic的同一个queue中，Kafka则可以将订单编号作为消息的key来确保同一编号的订单消息放置在了同一个partition。</li></ol><style>table th:nth-of-type(5){width:200px}</style>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;硬件配置&lt;/th&gt;&lt;th&gt;4C 4G SSD&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;操作系统&lt;/td&gt;&lt;td&gt;centeOS 6.5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MQ版本&lt;/td&gt;&lt;td&gt;rocketmq-broker-4.2.0-incubating-SNAPSHOT （2017-08-23）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;测试程序运行机器：Macbook Pro i7 2.3GHz, 16G&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="http://zyouwei.com/tags/java/"/>
    
      <category term="MQ" scheme="http://zyouwei.com/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存结构简介</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/Java-Memory-Model.html"/>
    <id>http://zyouwei.com/技术笔记/Java/Java-Memory-Model.html</id>
    <published>2018-01-10T03:34:55.000Z</published>
    <updated>2018-01-12T08:00:46.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java运行时内存结构"><a href="#Java运行时内存结构" class="headerlink" title="Java运行时内存结构"></a>Java运行时内存结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------------------------+</span><br><span class="line">|          Runtime Memory Structure Chart         |</span><br><span class="line">|  +--------------+ | +----------+  +----------+  |</span><br><span class="line">|  |              | | |          |  |  Native  |  |</span><br><span class="line">|  |  MethodArea  | | | VM Stack |  |  Method  |  |</span><br><span class="line">|  |   (PermGen)  | | |          |  |   Stack  |  |</span><br><span class="line">|  +--------------+ | +----------+  +----------+  |</span><br><span class="line">|  +--------------+ | +------------------------+  |</span><br><span class="line">|  |              | | |                        |  |</span><br><span class="line">|  |     Heap     | | |    Program Counter     |  |</span><br><span class="line">|  |              | | |        Register        |  |</span><br><span class="line">|  +--------------+   +------------------------+  |</span><br><span class="line">+-------------------------------------------------+</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>线程共享数据区域<ul><li>Heap: 堆，是JVM最大的内存区。</li><li>Method Area(PermGen): 方法区，存储类、常量、静态变量等数据。在某些JVM的实现中也称持久代、永久代。</li></ul></li></ul><blockquote><p>JDK8之后，PermGen被元空间（MetaSpace）替代</p></blockquote><ul><li>线程之间相互独立区域<ul><li>VM Stack: 虚拟机栈</li><li>Native Method Stack: 本地方法栈</li><li>Program Counter Register: 程序计数器</li></ul></li></ul><p>通过一张图来了解如何通过参数来控制各区域的内存大小: <img src="/images/posts/2018-01/JVM_Memory.jpg" alt="JVM Memory"></p><h2 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h2><p>对于大多数应用来说，java堆（Heap）是JVM管理的最大一块内存。Java堆是被所有线程共享的一块内存，在虚拟机启动时创建，主要用来存放对象实例。</p><p>堆也是垃圾收集器管理的主要区域，从内存回收的角度看，大部分收集器采用分代回收，所以Java的堆可以细分为：新生代、老生代。新生代可以分为Eden空间、From空间、To空间。</p><p>如果堆中没有内存完成实例分配，并且也无法扩展时将会抛出<code>OutOfMemoryError</code>异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------------------+</span><br><span class="line">|           Heap Structure               |</span><br><span class="line">| +--------------------+ +-------------+ |</span><br><span class="line">| |  Young Generation  | |             | |</span><br><span class="line">| | +----------------+ | |             | |</span><br><span class="line">| | |       Eden     | | |             | |</span><br><span class="line">| | |      Space     | | |             | |</span><br><span class="line">| | +----------------+ | |             | |</span><br><span class="line">| | +----------------+ | | Old/Tenured | |</span><br><span class="line">| | |    FromSpace   | | |  Generation | |</span><br><span class="line">| | |   (Survivor1)  | | |             | |</span><br><span class="line">| | +----------------+ | |             | |</span><br><span class="line">| | +----------------+ | |             | |</span><br><span class="line">| | |      ToSpace   | | |             | |</span><br><span class="line">| | |   (Survivor2)  | | |             | |</span><br><span class="line">| | +----------------+ | |             | |</span><br><span class="line">| +--------------------+ +-------------+ |</span><br><span class="line">+----------------------------------------+</span><br></pre></td></tr></table></figure><ul><li>新生代(Young Generation)<ul><li><a href="#eden">Eden Space</a></li><li><a href="#survivor">From Space(Survivor1)</a></li><li><a href="#survivor">To Space(Survivor2)</a></li></ul></li><li>老生代(Old Generation)</li></ul><p>相关参数设置：</p><table><thead><tr><th>参数名</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>-Xms</code></td><td>堆的初始值，设置示例：<code>-Xms10m</code></td><td></td><td>如果没有设置此值，默认值=分配的新生代值+分配的老生代的值。设置的值必须是<code>1KB</code>的倍数，且最小为<code>1MB</code>。等同于<code>-XX:InitialHeapSize</code>。</td></tr><tr><td><code>-Xmx</code></td><td>堆的最大值，设置示例：<code>-Xmx1g</code></td><td>根据运行时系统配置选择。</td><td>等同于<code>-XX:MaxHeapSize</code>。设置的值必须是<code>1KB</code>的倍数，且最小为<code>2MB</code>。在最为服务器模式运行时，一般都设置<code>-Xms</code>等于<code>-Xmx</code>。</td></tr><tr><td><code>-Xmn</code></td><td>新生代的最大值，设置示例：<code>-Xmn10m</code></td><td></td><td>建议设置新生代的大小为整个堆大小的：<code>1/4</code>至<code>1/2</code>之间。等同于<code>-XX:MaxNewSize</code>。</td></tr><tr><td><code>-XX:NewSize</code></td><td>新生代的初始值</td><td></td><td></td></tr><tr><td><code>-XX:SurvivorRation</code></td><td>用于设置<a href="#Eden">Eden</a>和其中一个<a href="#Survivor">Survivor</a>的比值</td><td>默认值为<code>8</code>，表示80%的为<code>Eden</code>，两个<code>Survivor</code>各占10%</td><td></td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>对象在新生代存活周期的阈值</td><td>在并行收集器中默认为<code>15</code>，CMS收集器中默认为<code>6</code></td><td>最大值<code>15</code></td></tr><tr><td><code>-XX:+PrintTenuringDistribution</code></td><td>用于在<code>Minor GC</code>时打印<code>Survivor</code>中各个年龄段对象的占用空间大小</td><td></td><td></td></tr><tr><td><code>-XX:NewRatio</code></td><td>用于设置老生代和新生代的比例</td><td>默认为<code>2</code>，即<code>1/3</code>为新生代，<code>2/3</code>为老生代</td><td>参数命名有些奇怪，实际计算公式: <code>比例值=老生代大小/新生代大小</code></td></tr></tbody></table><h3 id="新生代（Young-Generation）"><a href="#新生代（Young-Generation）" class="headerlink" title="新生代（Young Generation）"></a>新生代（Young Generation）</h3><p>用来存放新的对象实例，垃圾收集器会频繁的在此区域工作，当新生代的<code>Eden区</code>满了之后，会触发<code>Minor GC</code>或<code>Young GC</code>。因此新生代设置过小会导致频繁的<code>Minor GC</code>或<code>Young GC</code>。如果设置过大，则只会在<code>Full GC</code>时才被执行，这会消耗较长的时间。</p><p>为了优化GC的性能，把新生代又细分成了<code>Eden</code>、<code>Survivor1(from)</code>、<code>Survivor2(to)</code>三个区域。</p><h4 id="Eden"><a href="#Eden" class="headerlink" title="Eden"></a>Eden</h4><p>存储新生的对象。一般新创建的对象都会被分配到Eden区中，某些对象会特殊处理。默认Eden占新生代80%的大小。 </p><p>Eden区满了之后会触发<code>Minor GC</code>。</p><h4 id="Survivor"><a href="#Survivor" class="headerlink" title="Survivor"></a>Survivor</h4><p>新生代中有两个<code>Survivor</code>区，一个标记为<code>From</code>，一个标记为<code>TO</code>，在<code>GC</code>开始时，被标记为<code>TO</code>的空间一定是空的。</p><p>在<code>Minor GC</code>或<code>Young GC</code>发生时，<code>Eden</code>区中没有被引用（<code>ref</code>）的对象将被清除，需要存活的对象都会被复制到一个标记为<code>TO</code>的<code>Survivor</code>区中，<code>From</code>区中需要继续存活的对象会根据存活周期来决定去向，如果超过存活的周期来会被移动到<code>老生代</code>中，反之也会被复制到标记为<code>TO</code>的<code>Survivor</code>区中，如果<code>TO</code>被填满，则<code>TO</code>中所有的对象都会被移动到<code>老生代</code>中。GC完成之后，每个对象的生命周期年龄都会被加<code>1</code>，<code>Eden</code>和<code>From</code>都被清空，<code>FROM</code>和<code>TO</code>也会互换角色，上一次的<code>TO</code>变成新的<code>FROM</code>，新的<code>TO</code>又将是一个空的区域。</p><h3 id="老生代（Old-Generation）"><a href="#老生代（Old-Generation）" class="headerlink" title="老生代（Old Generation）"></a>老生代（Old Generation）</h3><p>存放生命周期长的对象。也称为“老年代”。对老生代的垃圾回收称为<code>Old GC</code>，当<code>老生代</code>满了之后会触发此<code>GC</code>。</p><blockquote><p>注意</p><p><code>Old GC</code>并不等同于<code>Major GC</code>或<code>Full GC</code>，根据不同的<code>GC</code>的实现，它们所指的范围都不一样。</p></blockquote><h2 id="方法区（MethodArea-Perm-Genration）"><a href="#方法区（MethodArea-Perm-Genration）" class="headerlink" title="方法区（MethodArea/Perm Genration）"></a>方法区（MethodArea/Perm Genration）</h2><p>方法区称作“非堆（Non-Heap）”，用来存放类对象、常量、静态变量、即时编译后的代码数据。与<code>Heap</code>一样都属于线程共享。</p><p>在习惯在HotSpot虚拟机上开发和部署的程序员来说，很多人把它称为“永久代（Permanent Generation）”，平常所说的永久代也是指这个区域。</p><p>尽管这个区域被称为永久代，但有些垃圾收集器也会在此区域执行回收，这个区域的回收主要是常量池的回收、以及类型的卸载。JVM规范没对此区域的限制非常宽松，允许不对此区域实现垃圾收集。</p><p>当方法区无法满足内存分配需求时，将抛出<code>OutOfMemoryError: PermGen</code>异常。</p><p>此空间的调整参数：</p><table><thead><tr><th>参数名</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>-XX:PermSize</code></td><td>永久代内存初始值</td><td>物理内存的1/64，例如：2G内存的机器初始值为32M</td><td></td></tr><tr><td><code>-XX:MaxPermSize</code></td><td>永久代内存最大值</td><td>物理内存的1/4，例如：2G内存的机器初始值为512M</td><td></td></tr></tbody></table><h2 id="元空间（MetaSpace）"><a href="#元空间（MetaSpace）" class="headerlink" title="元空间（MetaSpace）"></a>元空间（MetaSpace）</h2><p>JDK8开始，PermGen被元空间（MetaSpace）替代, PermGen被移除。</p><p>其实移除PermGen的工作从JDK7就开始了，但并没有完全移除，譬如类的静态变量、字面量（interned strings）都转移到了java heap中，符号引用转移到了native heap。</p><p>元空间的本质与PermGen类似，都是对JVM规范中方法区的实现。最大区别是元空间并不在虚拟机中，而是使用本地内存，因此元空间的大小受本地内存限制。</p><p>当方法区无法满足内存分配需求时，将抛出<code>OutOfMemoryError: PermGen</code>异常。</p><p>元空间的大小是JVM根据垃圾收集的结果来自动调整的。也可以通过如下参数来调整：</p><table><thead><tr><th>参数名</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>-XX:MetaspaceSize</code></td><td>元空间初始值</td><td>在默认情况下，这个值大小根据不同的平台在12M到20M浮动</td><td>该值越大触发Metaspace GC的时机就越晚，达到该值就会触发垃圾收集进行类型卸载。同时垃圾收集器会对该值进行调整：如果释放了大量空间，就会适当降低该值。如果释放了很少的空间，在不超过<code>MaxMetaspaceSize</code>的时，会适当提高该值。受本机最大可用内存限制，受32位与64位的JVM、操作系统限制</td></tr><tr><td><code>-XX:MaxMetaspaceSize</code></td><td>元空间最大值</td><td>无限制</td><td>超过最大值时，将抛出<code>OutOfMemoryError: PermGen</code>异常。</td></tr><tr><td><code>-XX:MinMetaspaceFreeRatio</code></td><td>元空间最小空闲占比</td><td>NA</td><td>当进行过元空间GC之后，如果当前元空间的空闲占比小于此值，则增长元空间的大小。此参数可以控制元空间的增长速度，如果该值过小会导致元空间的增长缓慢，可能会影响之后的类加载，如果该值过大会导致元空间增长过快，浪费内存。本机测试效果来看默认值在40左右，也就是40%</td></tr><tr><td><code>-XX:MaxMetaspaceFreeRatio</code></td><td>元空间最大空闲占比</td><td>NA</td><td>当进行过元空间GC之后，如果当前元空间的空闲占比超过此值，则会释放部分元空间。本机测试效果来看默认值在70左右，也就是70%</td></tr><tr><td><code>-XX:MinMetaspaceExpansion</code></td><td>元空间增长时的最小幅度</td><td>NA</td><td>在本机上该参数的默认值为340784B（大约330KB为）</td></tr><tr><td><code>-XX:MaxMetaspaceExpansion</code></td><td>元空间增长时的最大幅度</td><td>NA</td><td>在本机上该参数的默认值为5452592B（大约为5MB）</td></tr></tbody></table><blockquote><p>为什么要将<code>PermGen</code>切换为<code>Metaspace</code>?</p><ol><li>字符串存在永久代中，容易出现性能问题和内存溢出。</li><li>类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老生代溢出。</li><li>永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</li><li>Oracle 可能会将HotSpot 与 JRockit 合二为一。</li></ol></blockquote><h3 id="程序计数器（Program-Counter）"><a href="#程序计数器（Program-Counter）" class="headerlink" title="程序计数器（Program Counter）"></a>程序计数器（Program Counter）</h3><p>程序计数器也被称为“PC寄存器”。JVM支持多线程同时运行，每个线程都有自己独立且私有的程序计数器，占用空间极少，在线程创建时创建。</p><p>解释器通过它来获取下一条的字节码执行指令。如果执行的是java的方法，该程序计数器中保存的是当前执行指令的地址，如果是native方法，则该程序计数器中的值为undefined。</p><p>不会有<code>OutOfMemoryError</code>抛出。</p><h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><h3 id="虚拟机栈（VM-Stack）"><a href="#虚拟机栈（VM-Stack）" class="headerlink" title="虚拟机栈（VM Stack）"></a>虚拟机栈（VM Stack）</h3><p>虚拟机栈所使用的空间也是线程私有的，以栈帧为单位进行压栈和出栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">            当前线程                 线程2           线程n</span><br><span class="line">+-----------------------------+   +------+        +------+</span><br><span class="line">|           当前栈帧           |   |      |        |      |</span><br><span class="line">|     Current Stack Frame     |   |      |        |      |</span><br><span class="line">+-----------------------------+   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| |         局部变量         | |   |      |        |      |</span><br><span class="line">| |   Local Variable Table  | |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| |         操作数栈         | |   |      |        |      |</span><br><span class="line">| |      Operand Stack      | |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| |         动态连接         | |   |      |        |      |</span><br><span class="line">| |     Dynamic Linking     | |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| |         返回地址         | |   |      |        |      |</span><br><span class="line">| |      Return Address     | |   |      | ...... |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">| |         附加信息         | |   |      |        |      |</span><br><span class="line">| |      Additional Info    | |   |      |        |      |</span><br><span class="line">| +-------------------------+ |   |      |        |      |</span><br><span class="line">|           ......            |   |      |        |      |</span><br><span class="line">+-----------------------------+   |      |        |      |</span><br><span class="line">|                             |   |      |        |      |</span><br><span class="line">|         Stack Frame n       |   |      |        |      |</span><br><span class="line">+-----------------------------+   |      |        |      |</span><br><span class="line">|                             |   |      |        |      |</span><br><span class="line">|         Stack Frame 2       |   |      |        |      |</span><br><span class="line">+-----------------------------+   |      |        |      |</span><br><span class="line">|                             |   |      |        |      |</span><br><span class="line">|         Stack Frame 1       |   |      |        |      |</span><br><span class="line">+-----------------------------+   +------+        +------+</span><br></pre></td></tr></table></figure><ul><li><p>局部变量表</p><p>  每一个方法都拥有一块属于自己的内存区域来保存方法内部定义的局部变量，这块区域就是局部变量表，当这个方法运行结束后，这个局部变量的生命周期也就宣告结束。我们平常工作中所指的栈，实际上指的是虚拟机栈中的栈帧中的局部变量表。</p></li><li><p>操作数栈</p><p>  每个方法的内部都可以计算数据，而计算数据势必需要拥有一块内存区域，为虚拟机用来进行数值计算。因此在栈帧中，就需要有一块区域专门为当前方法计算数据使用，它就是操作数栈。</p><p>  在每进行一次完整的计算之后，栈中的数据都已经出栈，所以操作数栈的空间在一个方法内部是可以反复使用的。所以虚拟机在分配内存大小时，只分配当前方法，单次完整计算所需要的最大内存空间给当前栈帧，以减少内存的消耗。</p><p>  同时为了增加运行效率，减少数据的不断复制，在大部分虚拟机的实现中，将当前方法的局部变量表和上层方法的操作数栈的内存形成部分重叠，从而减少参数的不断复制而引起的性能消费。</p></li><li><p>动态连接</p><p>  虚拟机在执行方法时有两种形式被用来确定执行指令所对应的方法，第一种是类加载时，可以直接确定要执行的方法，譬如静态方法，私有方法，final方法等。这种形式叫做静态解析。第二种是在真正运行时，根据对象的真实引用来判断当前真正要执行的方法，这种形式称之为动态连接。</p><p>  在字节码文件中，都存在一个常量池，在这个常量池中保存有大量的符号引用，这个符号引用是每一个方法的间接引用。在字节码指令的中，使用的是这个符号引用。但是在运行时阶段，肯定需要调用到要执行方法在内存中真实的地址。这就需要将间接引用转化成直接引用。而这里的“动态连接”就是为了保证在运行时阶段，方法可以正确的找到要调用的方法，每个栈帧将自己在运行时常量池中所对应的真实地址记录的位置。</p><p>  这里需要注意的是，在栈帧中的动态连接和查找符号引用为真实引用中的动态连接，是两个概念。前者表示的是一个区域，后者表示的是一种查找方式。</p></li><li><p>返回地址</p><p>  退出当前方法的方式有两种，第一种是遇到返回指令时，正常的退出当前方法。另一种形式是遇到没有捕获而被抛出的异常。无论何种返回形式，在方法退出后，栈帧的顶端都应是当前退出方法的上层方法。同时上层方法的执行状态也需要根据当前的返回结果重新调整。所以每个栈帧可以利用“返回地址”这块区域帮助上层方法恢复状态。</p></li><li><p>附加信息</p><p>  对于虚拟机规范中没有申明的，拥有指定存放位置的信息可以由各个虚拟机自己决定，放置到这个区域中。</p></li></ul><p>有两种可能的异常抛出：<code>StackOverflowError</code>、<code>OutOfMemoryError</code>。<code>StackOverflowError</code>指的是内存中的栈结构在不断的入栈，最终导致栈的深度超过了虚拟机所允许的栈深度时，所抛出的错误</p><p>相关参数设置：</p><table><thead><tr><th>参数名</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>-Xss</code></td><td>线程栈大小，设置示例：-Xss320k</td><td>不同的平台默认值不同。32位环境一般为320kb，64位环境一般为1024kb。</td><td>此参数等同于<code>XX:ThreadStackSize</code></td></tr></tbody></table><h3 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h3><p>在虚拟机中，不但运行java方法，还会运行本地方法，也就是常见的<code>native</code>关键字修饰的方法。本地方法运行所使用的空间就是本地方法栈，其也是线程私有的。</p><p>它的作用跟虚拟机栈基本相似，其区别就是一个为java方法服务，一个为Native发光法服务。在虚拟机规范中，对于本地方法栈中的结构、方法的语言、方式，都没有强制规定，各个虚拟机可以自由的实现它。</p><h2 id="直接内存（Direct-Memory）"><a href="#直接内存（Direct-Memory）" class="headerlink" title="直接内存（Direct Memory）"></a>直接内存（Direct Memory）</h2><p>这块内存不属于运行时数据区，所以不受JVM堆大小的限制。</p><p>从Jdk1.4开始，NIO（new I/O）变可以直接使用Native函数直接分配这块内存。使用Java堆中的<code>DirectByteBuffer</code>对象作为这块内存的引用。</p><p>在使用NIO的应用中，配置虚拟机参数需要考虑到这块内存的大小分配，申请不到内存时也会抛出<code>OutOfMemoryError</code>。</p><p>相关参数设置：</p><table><thead><tr><th>参数名</th><th>描述</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>-XX:MaxDirectMemorySize</code></td><td>最大直接内存值，设置示例：-XX:MaxDirectMemorySize=10m</td><td>默认情况下，大小设置为0，这意味着JVM将自动分配和扩展。</td><td></td></tr></tbody></table><h2 id="关于GC"><a href="#关于GC" class="headerlink" title="关于GC"></a>关于GC</h2><p>针对<code>HotSpot VM</code>的实现，GC的分类只有两大种：</p><ul><li>Partial GC: 局部GC<ul><li>Young GC: 只收集<code>新生代</code></li><li>Old GC: 只收集<code>老生代</code>，只有<code>CMS</code>的<code>concurrent collection</code>是这个模式</li><li>Mixed GC: 收集所有<code>新生代</code>以及部分<code>老生代</code>。只有<code>G1</code>才有此模式。</li></ul></li><li>Full GC: 全量GC，收集整个堆(包括<code>新生代</code>和<code>老生代</code>)、以及方法区（java8之前的<code>PermGen</code>, java8开始的<code>metaspace</code>）。</li></ul><p>通常所说的<code>Major GC</code>与<code>Full GC</code>是等价的。但由于<code>HotSpot VM</code>发展了这么多年，很对名词解读已经混乱，当有人说<code>Major GC</code>时，一点要问清楚他说的是<code>Full GC</code>还是<code>Old GC</code>。</p><p>对于<code>HotSpot VM</code>的串行收集器（Serial GC）的实现来看，各<code>GC</code>场景的触发条件是：</p><ul><li>Young GC: Eden区没有足够空间进行分配时触发；</li><li>Old GC: 老生代没有足够空间进行分配时触发；只有<code>CMS</code>的<code>concurrent collection</code>是这个模式</li><li>Full GC: <ul><li>方法区<code>PermGen</code>或<code>Metaspace</code>没有足够空间进行分配时触发</li><li>在准备触发<code>Young GC</code>时，如果发现之前<code>Young GC</code>移动到<code>老生代</code>的平均大小大于当前<code>老生代</code>剩余空间时，会取消<code>Young GC</code>转而触发<code>Full GC</code> (除<code>CMS</code>的<code>concurrent collection</code>之外，其它的针对<code>老生代</code>的回收一般都会包含对<code>新生代</code>的处理)</li><li>程序调用<code>System.gc()</code></li><li>堆<code>Heap</code>Dump时带GC，默认也会触发</li></ul></li></ul><p>对于<code>HotSpot VM</code>的并行收集器（Parallel GC）的实现则不一样，以<code>CMS</code>为例，它会定时去检查<code>老生代</code>的是用量，超过一定的比例就会触发。</p><h2 id="相关测试代码"><a href="#相关测试代码" class="headerlink" title="相关测试代码"></a>相关测试代码</h2><h3 id="堆（Heap）内存溢出测试代码"><a href="#堆（Heap）内存溢出测试代码" class="headerlink" title="堆（Heap）内存溢出测试代码"></a>堆（Heap）内存溢出测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆（Heap）内存溢出测试代码</span></span><br><span class="line"><span class="comment"> * 启动时添加如下参数可以观察GC日志：</span></span><br><span class="line"><span class="comment"> *  -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:-UseCompressedClassPointers</span></span><br><span class="line"><span class="comment"> * 添加如下参数设置JVM堆大小：</span></span><br><span class="line"><span class="comment"> *  -Xms16m -Xmn8m -Xmx16m</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]);<span class="comment">//每次增加一个1M大小的数组对象</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">"count="</span> + i);<span class="comment">//记录运行的次数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="方法区（PermGen-Metaspace）内存溢出测试代码"><a href="#方法区（PermGen-Metaspace）内存溢出测试代码" class="headerlink" title="方法区（PermGen/Metaspace）内存溢出测试代码"></a>方法区（PermGen/Metaspace）内存溢出测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法区（PermGen/Metaspace）内存溢出测试代码</span></span><br><span class="line"><span class="comment"> * 启动时添加如下参数可以观察GC日志：</span></span><br><span class="line"><span class="comment"> *  -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:-UseCompressedClassPointers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetaspaceTest</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 类持有</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 死循环不断的生成不同的类。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 定义一个类名称为Class&#123;i&#125;，它的访问域为public，父类为java.lang.Object，不实现任何接口</span></span><br><span class="line">            cw.visit(Opcodes.V1_1, Opcodes.ACC_PUBLIC, <span class="string">"Class"</span> + i, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 定义构造函数&lt;init&gt;方法</span></span><br><span class="line">            MethodVisitor mw = cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>,</span><br><span class="line">                    <span class="string">"()V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 第一个指令为加载this</span></span><br><span class="line">            mw.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 第二个指令为调用父类Object的构造函数</span></span><br><span class="line">            mw.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">"java/lang/Object"</span>,</span><br><span class="line">                    <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 第三条指令为return</span></span><br><span class="line">            mw.visitInsn(Opcodes.RETURN);</span><br><span class="line">            mw.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            mw.visitEnd();</span><br><span class="line"></span><br><span class="line">            MetaspaceTest test = <span class="keyword">new</span> MetaspaceTest();</span><br><span class="line">            <span class="keyword">byte</span>[] code = cw.toByteArray();</span><br><span class="line">            <span class="comment">// 定义类</span></span><br><span class="line">            Class&lt;?&gt; exampleClass = test.defineClass(<span class="string">"Class"</span> + i, code, <span class="number">0</span>, code.length);</span><br><span class="line">            classes.add(exampleClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟机栈（VM-Stack）溢出测试源码"><a href="#虚拟机栈（VM-Stack）溢出测试源码" class="headerlink" title="虚拟机栈（VM Stack）溢出测试源码"></a>虚拟机栈（VM Stack）溢出测试源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚拟机栈（VM Stack）溢出测试源码</span></span><br><span class="line"><span class="comment"> * 本机测试大概在栈深度达到22217时会出现溢出，每次运行值存在一定偏差</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StackTest mock = <span class="keyword">new</span> StackTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mock.call();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Stack deep : "</span> + index);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串常量溢出测试源码"><a href="#字符串常量溢出测试源码" class="headerlink" title="字符串常量溢出测试源码"></a>字符串常量溢出测试源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串常量溢出测试源码.</span></span><br><span class="line"><span class="comment"> * jvm 6中运行会抛出`OutOfMemoryError: PermGen space`</span></span><br><span class="line"><span class="comment"> * jvm 7和jvm 8中运行会抛出`OutOfMemoryError: Java heap space`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String static_str = <span class="string">"xxxxxx"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以2的指数级不断的生成新的字符串</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String str = static_str + static_str;</span><br><span class="line">            base = static_str;</span><br><span class="line">            list.add(str.intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li><li><a href="http://www.importnew.com/23746.html" target="_blank" rel="noopener">http://www.importnew.com/23746.html</a></li><li><a href="http://blog.csdn.net/xlnjulp/article/details/46763045" target="_blank" rel="noopener">http://blog.csdn.net/xlnjulp/article/details/46763045</a></li><li><a href="https://dzone.com/articles/java-8-permgen-metaspace" target="_blank" rel="noopener">https://dzone.com/articles/java-8-permgen-metaspace</a></li><li><a href="http://caoyaojun1988-163-com.iteye.com/blog/1969853" target="_blank" rel="noopener">http://caoyaojun1988-163-com.iteye.com/blog/1969853</a></li><li><a href="http://www.cnblogs.com/smyhvae/p/4748392.html" target="_blank" rel="noopener">http://www.cnblogs.com/smyhvae/p/4748392.html</a></li></ul><style></style>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java运行时内存结构&quot;&gt;&lt;a href=&quot;#Java运行时内存结构&quot; class=&quot;headerlink&quot; title=&quot;Java运行时内存结构&quot;&gt;&lt;/a&gt;Java运行时内存结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|          Runtime Memory Structure Chart         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  +--------------+ | +----------+  +----------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |              | | |          |  |  Native  |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |  MethodArea  | | | VM Stack |  |  Method  |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |   (PermGen)  | | |          |  |   Stack  |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  +--------------+ | +----------+  +----------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  +--------------+ | +------------------------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |              | | |                        |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |     Heap     | | |    Program Counter     |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  |              | | |        Register        |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  +--------------+   +------------------------+  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="http://zyouwei.com/tags/java/"/>
    
      <category term="jvm" scheme="http://zyouwei.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix 配置属性参考</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/Hystrix-configuration.html"/>
    <id>http://zyouwei.com/技术笔记/Java/Hystrix-configuration.html</id>
    <published>2018-01-04T02:39:38.000Z</published>
    <updated>2018-01-05T04:49:05.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hystrix使用<a href="https://github.com/Netflix/archaius" target="_blank" rel="noopener">Archaius</a>作为配置属性的默认实现。</p><p>下面的文档描述了默认使用的<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/properties/HystrixPropertiesStrategy.html" target="_blank" rel="noopener">HystrixPropertiesStrategy</a>实现，你也可以使用<a href="https://github.com/Netflix/Hystrix/wiki/Plugins" target="_blank" rel="noopener">插件</a>的方式来覆盖它。</p><p>每个属性有四个优先级：</p><ol><li><p><strong>代码的全局默认值</strong></p><p>如果没有设置以下3个，则这是默认值。 全局默认值在下表中显示为 <strong>“默认值”</strong>。</p></li><li><p><strong>动态全局默认属性</strong></p><p>你可以使用属性更改全局默认值。 全局默认属性名称在下表中显示为 <strong>“默认属性”</strong>。</p><a id="more"></a></li><li><p><strong>用代码定义默认实例属性</strong></p><p>你可以定义特定于实例的默认值。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class="keyword">int</span> value)</span><br></pre></td></tr></table></figure><p> 你需要类似于以下的方式将这种命令插入到<code>HystrixCommand</code>构造函数中：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HystrixCommandInstance</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ExampleGroup"</span>))</span><br><span class="line">                .andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(<span class="number">500</span>)));</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一般的设置初始值可以采用便利的构造函数方式。这是一个例子：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HystrixCommandInstance</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ExampleGroup"</span>), <span class="number">500</span>);</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>动态设置实例属性</strong></p><p> 你可以动态设置实例特定的值，从而覆盖前面三个默认级别。 </p><p> 动态实例属性名称在下表中显示为 <strong>“实例属性”</strong>。 </p><p> 例：</p> <table> <thead> <tr> <th>实例属性</th> <th><code>hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</code></th> </tr> </thead> </table><p> 将属性的<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandKey.html" target="_blank" rel="noopener">HystrixCommandKey</a>部分替换为您所定位的<code>HystrixCommand</code>的<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandKey.html#name(" target="_blank" rel="noopener">HystrixCommandKey.name()</a>)值。 </p><p> 例如，如果被命名为“<code>SubscriberGetAccount</code>”，则属性名称将是：</p><blockquote><p><code>hystrix.command.SubscriberGetAccount.execution.isolation.thread.timeoutInMilliseconds</code></p></blockquote></li></ol><h2 id="命令属性（Command-Properties）"><a href="#命令属性（Command-Properties）" class="headerlink" title="命令属性（Command Properties）"></a>命令属性（Command Properties）</h2><p>以下<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCommandProperties.html" target="_blank" rel="noopener">属性</a>将控制<code>HystrixCommand</code>的行为：</p><h3 id="执行（Execution）"><a href="#执行（Execution）" class="headerlink" title="执行（Execution）"></a>执行（Execution）</h3><p>以下属性控制<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#run(" target="_blank" rel="noopener">HystrixCommand.run()</a>)执行。</p><h4 id="execution-isolation-strategy"><a href="#execution-isolation-strategy" class="headerlink" title="execution.isolation.strategy"></a>execution.isolation.strategy</h4><p>这个属性指示<code>HystrixCommand.run()</code>执行的隔离策略，有以下两种选择之一： </p><ul><li><code>THREAD</code> —— 它在单独的线程上执行，并发请求受线程池中线程数量的限制</li><li><code>SEMAPHORE</code> —— 它在调用线程上执行，并发请求受信号计数的限制</li></ul><p><strong>线程或信号量</strong></p><p>缺省值和建议的设置是运行<code>HystrixCommand</code>时使用线程隔离（<code>THREAD</code>），和运行<code>HystrixObservableCommand</code>时使用信号隔离（<code>SEMAPHORE</code>）。 </p><p>在线程中执行命令能对网络超时提供另一层保护。</p><p>通常情况下，对于<code>HystrixCommand</code>来说，唯一使用信号量隔离的场景是，当调用量非常大（每秒数百次）时单独线程的开销太高；这通常只适用于非网络调用。</p><blockquote><p>Netflix的API在40+线程池中运行100+命令，并且只有少数命令不在线程中运行 —— 那些从内存中的缓存提取元数据或或是门面到线程隔离命令（更多信息请参见<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use#common-patterns" target="_blank" rel="noopener">Primary + Secondary with Fallback” pattern</a>）。</p></blockquote><p><img src="https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/isolation-options-1280.png" alt="isolation-options"></p><p>更多信息请参见<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#isolation" target="_blank" rel="noopener">隔离是如何工作的</a>。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>THREAD</code>（参见：<code>ExecutionIsolationStrategy.THREAD</code>）</th></tr></thead><tbody><tr><td><strong>取值范围</strong></td><td style="text-align:left"><code>THREAD</code>, <code>SEMAPHORE</code></td></tr><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.isolation.strategy</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.isolation.strategy</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left">// to use thread isolation <br> <code>HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD)</code>  <br> // to use semaphore isolation  <br> <code>HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.SEMAPHORE)</code></td></tr></tbody></table><h4 id="execution-isolation-thread-timeoutInMilliseconds"><a href="#execution-isolation-thread-timeoutInMilliseconds" class="headerlink" title="execution.isolation.thread.timeoutInMilliseconds"></a>execution.isolation.thread.timeoutInMilliseconds</h4><p>该属性设置以毫秒为单位，在该时间之后，调用者将观察到超时并离开命令执行。 Hystrix将<code>HystrixCommand</code>标记为<code>TIMEOUT</code>，并执行回退逻辑。请注意，如果需要可以为每个命令配置关闭超时的设置（请参阅<code>command.timeout.enabled</code>）。</p><p><strong>注意：</strong> 超时将在<code>HystrixCommand.queue()</code>上触发，即使调用者从未在生成的<code>Future</code>上调用<code>get()</code>。在Hystrix <code>1.4.0</code>之前，只有调用<code>get()</code>才能使超时机制在这种情况下生效。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>1000</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(int value)</code></td></tr></tbody></table><h4 id="execution-timeout-enabled"><a href="#execution-timeout-enabled" class="headerlink" title="execution.timeout.enabled"></a>execution.timeout.enabled</h4><p>该属性指示<code>HystrixCommand.run()</code>执行是否应该有一个超时。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.timeout.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.timeout.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withExecutionTimeoutEnabled(boolean value)</code></td></tr></tbody></table><h4 id="execution-isolation-thread-interruptOnTimeout"><a href="#execution-isolation-thread-interruptOnTimeout" class="headerlink" title="execution.isolation.thread.interruptOnTimeout"></a>execution.isolation.thread.interruptOnTimeout</h4><p>这个属性指示<code>HystrixCommand.run()</code>执行是否应该在发生超时时被中断。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.isolation.thread.interruptOnTimeout</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeout</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withExecutionIsolationThreadInterruptOnTimeout(boolean value)</code></td></tr></tbody></table><h4 id="execution-isolation-thread-interruptOnCancel"><a href="#execution-isolation-thread-interruptOnCancel" class="headerlink" title="execution.isolation.thread.interruptOnCancel"></a>execution.isolation.thread.interruptOnCancel</h4><p>这个属性指示<code>HystrixCommand.run()</code>执行是否应该在发生取消时被中断。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>false</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.isolation.thread.interruptOnCancel</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancel</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withExecutionIsolationThreadInterruptOnCancel(boolean value)</code></td></tr></tbody></table><h4 id="execution-isolation-semaphore-maxConcurrentRequests"><a href="#execution-isolation-semaphore-maxConcurrentRequests" class="headerlink" title="execution.isolation.semaphore.maxConcurrentRequests"></a>execution.isolation.semaphore.maxConcurrentRequests</h4><p>当您使用<code>ExecutionIsolationStrategy.SEMAPHORE</code>时，此属性设置允许<code>HystrixCommand.run()</code>方法的最大请求数。 </p><p>如果达到这个最大并发限制，则后续请求将被拒绝。</p><p>当你选择一个信号量时，你使用的逻辑基本上和你选择线程池中添加多少个线程相同，但是信号量的开销要小得多，通常执行速度要快得多（亚毫秒） ，否则你会使用线程。 </p><blockquote><p>例如，5000rps的单个实例在内存中查找指标聚集仅需要2个信号量就能工作。</p></blockquote><p>隔离原理仍然是相同的，所以信号量应该仍然是整个容器（如：Tomcat）线程池的一小部分，而不是全部或大部分，否则它不提供保护。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withExecutionIsolationSemaphoreMaxConcurrentRequests(int value)</code></td></tr></tbody></table><h3 id="回退（Fallback）"><a href="#回退（Fallback）" class="headerlink" title="回退（Fallback）"></a>回退（Fallback）</h3><p>以下属性控制<code>HystrixCommand.getFallback()</code>如何执行。这些属性适用于<code>ExecutionIsolationStrategy.THREAD</code>和<code>ExecutionIsolationStrategy.SEMAPHORE</code>。</p><h4 id="fallback-isolation-semaphore-maxConcurrentRequests"><a href="#fallback-isolation-semaphore-maxConcurrentRequests" class="headerlink" title="fallback.isolation.semaphore.maxConcurrentRequests"></a>fallback.isolation.semaphore.maxConcurrentRequests</h4><p>该属性设置<code>HystrixCommand.getFallback()</code>方法允许从调用线程中创建的最大请求数。</p><p>如果达到最大并发限制，则随后的请求将被拒绝并抛出异常，因为没有回退被提取到。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.fallback.isolation.semaphore.maxConcurrentRequests</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withFallbackIsolationSemaphoreMaxConcurrentRequests(int value)</code></td></tr></tbody></table><h4 id="fallback-enabled"><a href="#fallback-enabled" class="headerlink" title="fallback.enabled"></a>fallback.enabled</h4><p>Since: 1.2</p><p>该属性设置是否在发生故障或拒绝时尝试调用<code>HystrixCommand.getFallback()</code>。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.fallback.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.fallback.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withFallbackEnabled(boolean value)</code></td></tr></tbody></table><h3 id="断路器（Circuit-Breaker）"><a href="#断路器（Circuit-Breaker）" class="headerlink" title="断路器（Circuit Breaker）"></a>断路器（Circuit Breaker）</h3><p>断路器属性控制<code>HystrixCircuitBreaker</code>的行为。</p><h4 id="circuitBreaker-enabled"><a href="#circuitBreaker-enabled" class="headerlink" title="circuitBreaker.enabled"></a>circuitBreaker.enabled</h4><p>该属性设置是否将使用断路器来跟踪健康状况并且如果断路器跳闸则将其短路。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerEnabled(boolean value)</code></td></tr></tbody></table><h4 id="circuitBreaker-requestVolumeThreshold"><a href="#circuitBreaker-requestVolumeThreshold" class="headerlink" title="circuitBreaker.requestVolumeThreshold"></a>circuitBreaker.requestVolumeThreshold</h4><p>该属性设置滚动窗口中将使电路跳闸的最小请求数量。 </p><p>例如，如果值是20，那么如果在滚动窗口中接收到19个请求（例如10秒的窗口），则即使所有19个请求都失败，电路也不会跳闸。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>20</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.requestVolumeThreshold</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.requestVolumeThreshold</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerRequestVolumeThreshold(int value)</code></td></tr></tbody></table><h4 id="circuitBreaker-sleepWindowInMilliseconds"><a href="#circuitBreaker-sleepWindowInMilliseconds" class="headerlink" title="circuitBreaker.sleepWindowInMilliseconds"></a>circuitBreaker.sleepWindowInMilliseconds</h4><p>该属性设置跳闸后的时间量，拒绝请求，然后再次尝试确定电路是否应再次闭合。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>5000</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerSleepWindowInMilliseconds(int value)</code></td></tr></tbody></table><h4 id="circuitBreaker-errorThresholdPercentage"><a href="#circuitBreaker-errorThresholdPercentage" class="headerlink" title="circuitBreaker.errorThresholdPercentage"></a>circuitBreaker.errorThresholdPercentage</h4><p>该属性设置错误百分比，在该值以上，电路应断开并开始将请求短路到回退逻辑。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>50</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.errorThresholdPercentage</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerErrorThresholdPercentage(int value)</code></td></tr></tbody></table><h4 id="circuitBreaker-forceOpen"><a href="#circuitBreaker-forceOpen" class="headerlink" title="circuitBreaker.forceOpen"></a>circuitBreaker.forceOpen</h4><p>如果该属性为真，则强制断路器进入打开（跳闸）状态，将拒绝所有的请求。</p><p>此属性优先于<code>circuitBreaker.forceClosed</code>。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>false</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.forceOpen</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.forceOpen</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerForceOpen(boolean value)</code></td></tr></tbody></table><h4 id="circuitBreaker-forceClosed"><a href="#circuitBreaker-forceClosed" class="headerlink" title="circuitBreaker.forceClosed"></a>circuitBreaker.forceClosed</h4><p>如果该属性为真，则强制断路器进入关闭状态，在该状态下将允许请求，而不管错误百分比如何。 </p><p><code>circuitBreaker.forceOpen</code>属性优先，所以如果它被设置为<code>true</code>，这个属性什么都不做。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>false</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.circuitBreaker.forceClosed</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.circuitBreaker.forceClosed</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(boolean value)</code></td></tr></tbody></table><h3 id="度量（Mitrics）"><a href="#度量（Mitrics）" class="headerlink" title="度量（Mitrics）"></a>度量（Mitrics）</h3><p>以下属性与从<code>HystrixCommand</code>和<code>HystrixObservableCommand</code>执行捕获指标有关。</p><h4 id="metrics-rollingStats-timeInMilliseconds"><a href="#metrics-rollingStats-timeInMilliseconds" class="headerlink" title="metrics.rollingStats.timeInMilliseconds"></a>metrics.rollingStats.timeInMilliseconds</h4><p>该属性设置统计滚动窗口的持续时间，以毫秒为单位。这是Hystrix保持断路器使用和发布指标的时间。 </p><p>从1.4.12开始，此属性仅影响初始度量标准的创建，启动后对此属性所做的调整将不会生效。这样可以避免指标数据丢失，也可以优化指标收集。 </p><p>窗口根据这些增量被分成桶和“卷”。</p><p>例如，如果将此属性设置为10秒（<code>10000</code>），具有十个1秒桶的，则下图显示了如何将新桶和旧桶关闭：</p><p><img src="https://github.com/Netflix/Hystrix/wiki/images/rolling-stats-640.png" alt="rolling-stats"></p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10000</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(int value)</code></td></tr></tbody></table><h4 id="metrics-rollingStats-numBuckets"><a href="#metrics-rollingStats-numBuckets" class="headerlink" title="metrics.rollingStats.numBuckets"></a>metrics.rollingStats.numBuckets</h4><p>该属性设置滚动统计窗口分成的桶的数量。</p><p><strong>注意：</strong> 必须要确保如下条件： “<code>metrics.rollingStats.timeInMilliseconds ％ metrics.rollingStats.numBuckets == 0</code>” ， 否则会引发异常。 </p><p>换句话说，10000/10是可以的，10000/20也行，但是10000/7不行。</p><p>从1.4.12开始，此属性仅影响初始度量标准的创建，启动后对此属性所做的调整将不会生效。这样可以避免指标数据丢失，也可以优化指标收集。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>取值范围</strong></td><td style="text-align:left">可以被<code>metric.rollingStats.timeInMilliseconds</code>整除的任何值。结果应该是数百或数千毫秒的桶。大容量的性能还没有测试过小于100ms的桶。</td></tr><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingStats.numBuckets</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingStats.numBuckets</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingStatisticalWindowBuckets(int value)</code></td></tr></tbody></table><h4 id="metrics-rollingPercentile-enabled"><a href="#metrics-rollingPercentile-enabled" class="headerlink" title="metrics.rollingPercentile.enabled"></a>metrics.rollingPercentile.enabled</h4><p>这个属性表示执行延迟是否应该跟踪和计算为百分比。如果他们被禁用，则所有汇总统计（平均值，百分位数）返回为-1。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingPercentile.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingPercentileEnabled(boolean value)</code></td></tr></tbody></table><h4 id="metrics-rollingPercentile-timeInMilliseconds"><a href="#metrics-rollingPercentile-timeInMilliseconds" class="headerlink" title="metrics.rollingPercentile.timeInMilliseconds"></a>metrics.rollingPercentile.timeInMilliseconds</h4><p>此属性设置滚动窗口的持续时间，在该窗口中保留执行时间以允许百分数计算（以毫秒为单位）。</p><p> 窗口根据这些增量被分成桶和“卷”。</p><p> 从1.4.12开始，此属性仅影响初始度量标准的创建，启动后对此属性所做的调整将不会生效。这样可以避免指标数据丢失，也可以优化指标收集。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>6000</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.timeInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingPercentileWindowInMilliseconds(int value)</code> </td></tr></tbody></table><h4 id="metrics-rollingPercentile-numBuckets"><a href="#metrics-rollingPercentile-numBuckets" class="headerlink" title="metrics.rollingPercentile.numBuckets"></a>metrics.rollingPercentile.numBuckets</h4><p>这个属性设置了<code>rollingPercentile</code>窗口将被分成的桶的数量。</p><p><strong>注意：</strong> 必须要确保如下条件：“<code>metrics.rollingPercentile.timeInMilliseconds ％ metrics.rollingPercentile.numBuckets == 0</code>” ，否则会引发异常。 </p><p>换句话说，60000/6是可以的，60000/60也是可以的，但10000/7不行。 </p><p>从1.4.12开始，此属性仅影响初始度量标准的创建，启动后对此属性所做的调整将不会生效。这样可以避免指标数据丢失，也可以优化指标收集。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>6</code></th></tr></thead><tbody><tr><td><strong>取值范围</strong></td><td style="text-align:left">可以被<code>metric.rollingPercentile.timeInMilliseconds</code>整除的任何值。结果应该是数千毫秒的桶。大容量的性能还没有测试过小于1000ms的桶。</td></tr><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingPercentile.numBuckets</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.numBuckets</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingPercentileWindowBuckets(int value)</code></td></tr></tbody></table><h4 id="metrics-rollingPercentile-bucketSize"><a href="#metrics-rollingPercentile-bucketSize" class="headerlink" title="metrics.rollingPercentile.bucketSize"></a>metrics.rollingPercentile.bucketSize</h4><p>该属性设置每个桶的最大执行次数。如果更多的执行在此期间发生，他们将环绕并开始在桶的开头重写。 </p><p>例如，如果桶大小设置为100，并桶的窗口为10秒，但是在此期间发生500次执行，则只有最后100次执行将保留在该10秒的桶中。 </p><p>如果增加这个大小，这也增加了存储值所需的内存量，并增加了对列表进行排序以进行百分比计算所需的时间。 </p><p>从1.4.12开始，此属性仅影响初始度量标准的创建，启动后对此属性所做的调整将不会生效。这样可以避免指标数据丢失，也可以优化指标收集。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>100</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.rollingPercentile.bucketSize</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.bucketSize</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsRollingPercentileBucketSize(int value)</code></td></tr></tbody></table><h4 id="metrics-healthSnapshot-intervalInMilliseconds"><a href="#metrics-healthSnapshot-intervalInMilliseconds" class="headerlink" title="metrics.healthSnapshot.intervalInMilliseconds"></a>metrics.healthSnapshot.intervalInMilliseconds</h4><p>此属性设置允许执行运行成功和错误百分比并影响断路器状态的健康快照之间等待的时间（以毫秒为单位）。 </p><p>在大容量的电路上，连续计算误差百分比可能会成为CPU密集型的，因此这个属性允许你控制计算的频率。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>500</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.metrics.healthSnapshot.intervalInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withMetricsHealthSnapshotIntervalInMilliseconds(int value)</code></td></tr></tbody></table><h3 id="请求上下文（Request-Context）"><a href="#请求上下文（Request-Context）" class="headerlink" title="请求上下文（Request Context）"></a>请求上下文（Request Context）</h3><p>这些属性涉及<code>HystrixCommand</code>使用<a href="http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/concurrency/HystrixRequestContext.html" target="_blank" rel="noopener">HystrixRequestContext</a>功能。</p><h4 id="requestCache-enabled"><a href="#requestCache-enabled" class="headerlink" title="requestCache.enabled"></a>requestCache.enabled</h4><p>此属性指示<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommand.html#getCacheKey(" target="_blank" rel="noopener">HystrixCommand.getCacheKey()</a>)是否应与<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixRequestCache.html" target="_blank" rel="noopener">HystrixRequestCache</a>一起使用，以通过请求范围缓存提供重复数据删除功能。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.requestCache.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.requestCache.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withRequestCacheEnabled(boolean value)</code></td></tr></tbody></table><h4 id="requestLog-enabled"><a href="#requestLog-enabled" class="headerlink" title="requestLog.enabled"></a>requestLog.enabled</h4><p>此属性指示是否应将<code>HystrixCommand</code>执行和事件记录到<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixRequestLog.html" target="_blank" rel="noopener">HystrixRequestLog</a></p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.command.default.requestLog.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.command.HystrixCommandKey.requestLog.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCommandProperties.Setter().withRequestLogEnabled(boolean value)</code></td></tr></tbody></table><h2 id="破裂器属性（Collapser-Properties）"><a href="#破裂器属性（Collapser-Properties）" class="headerlink" title="破裂器属性（Collapser Properties）"></a>破裂器属性（Collapser Properties）</h2><p>以下属性控制<a href="http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCollapser.html" target="_blank" rel="noopener">HystrixCollapser</a>行为。</p><h3 id="maxRequestsInBatch"><a href="#maxRequestsInBatch" class="headerlink" title="maxRequestsInBatch"></a>maxRequestsInBatch</h3><p>此属性设置批处理允许的最大请求数量，然后触发批处理执行。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>Integer.MAX_VALUE</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.collapser.default.maxRequestsInBatch</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.collapser.HystrixCollapserKey.maxRequestsInBatch</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCollapserProperties.Setter().withMaxRequestsInBatch(int value)</code></td></tr></tbody></table><h3 id="timerDelayInMilliseconds"><a href="#timerDelayInMilliseconds" class="headerlink" title="timerDelayInMilliseconds"></a>timerDelayInMilliseconds</h3><p>此属性设置触发执行之后创建批处理的毫秒数。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.collapser.default.timerDelayInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.collapser.HystrixCollapserKey.timerDelayInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCollapserProperties.Setter().withTimerDelayInMilliseconds(int value)</code></td></tr></tbody></table><h3 id="requestCache-enabled-1"><a href="#requestCache-enabled-1" class="headerlink" title="requestCache.enabled"></a>requestCache.enabled</h3><p>此属性指示是否为<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCollapser.html#execute--" target="_blank" rel="noopener">HystrixCollapser.execute()</a>和<a href="http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCollapser.html#queue--" target="_blank" rel="noopener">HystrixCollapser.queue()</a>调用启用了请求缓存。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>true</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.collapser.default.requestCache.enabled</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.collapser.HystrixCommandKey.requestCache.enabled</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixCollapserProperties.Setter().withRequestCacheEnabled(boolean value)</code></td></tr></tbody></table><h2 id="线程池属性（Thread-Pool-Properties）"><a href="#线程池属性（Thread-Pool-Properties）" class="headerlink" title="线程池属性（Thread Pool Properties）"></a>线程池属性（Thread Pool Properties）</h2><p>以下属性控制Hystrix命令执行的线程池的行为。请注意，这些名称与<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" rel="noopener">ThreadPoolExecutor Javadoc</a>中的名称相匹配</p><p>大多数情况下，10个线程的默认值都可以（通常可以做得更小）。 </p><p>要确定是否需要更大，计算大小的基本公式是： </p><p><em>在健康时每秒的请求高峰数 × 99%的延迟秒数+一些喘息的空间时。</em></p><p>看下面的例子，看看这个公式是如何实施的。 总体原则是尽可能保持池的小，因为它是减轻负载并防止资源在延迟发生时被阻塞的主要工具。 </p><blockquote><p>Netflix API有30+的线程池被设置为10，两个在20，一个在25。</p></blockquote><p><img src="https://github.com/Netflix/Hystrix/wiki/images/thread-configuration-1280.png" alt="thread-configuration"></p><p>上图显示了一个配置示例，其中依赖关系没有理由达到第99.5百分位，因此它在网络超时层将其缩短，并立即重试，并期望大部分时间会得到中位延迟能够在300ms线程超时内完成这一切。</p><p>如果依赖有合法的理由有时达到99.5％（比如缓存未命中），那么网络超时将被设置得比它高，比如325ms，重试0或1次，线程超时设置更高（350ms + ）。</p><p>线程池的大小为10，以处理第99个百分点请求的突发，但是当一切正常时，此线程池通常在任何给定时间通常只有1或2个线程处于活动状态，以服务大多数40ms的中间调用。</p><p>当你正确地配置它时，<code>HystrixCommand</code>层的超时应该是很少的，但是如果网络等待时间以外的事情影响了时间，或者在最坏的情况下连接+读+重试+连接+读超过配置的整体超时。 </p><p>每个方向的配置和折衷的攻击性对于每个依赖性是不同的。 </p><p>当性能特征发生变化或发现问题时，您可以根据需要实时更改配置，而且如果出现问题或配置错误，则无需关闭整个应用程序。</p><h3 id="coreSize"><a href="#coreSize" class="headerlink" title="coreSize"></a>coreSize</h3><p>此属性设置核心线程数。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.coreSize</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.coreSize</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withCoreSize(int value)</code></td></tr></tbody></table><h3 id="maximumSize"><a href="#maximumSize" class="headerlink" title="maximumSize"></a>maximumSize</h3><p>在<code>1.5.9</code>中添加。该属性设置最大的线程池大小。这是开始无需拒绝<code>HystrixCommand</code>即可支持的最大并发数量。请注意，如果您还设置了<code>allowMaximumSizeToDivergeFromCoreSize</code>，则此设置才会生效。在<code>1.5.9</code>之前，核心和最大大小总是相等的。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.maximumSize</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.maximumSize</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withMaximumSize(int value)</code></td></tr></tbody></table><h3 id="maxQueueSize"><a href="#maxQueueSize" class="headerlink" title="maxQueueSize"></a>maxQueueSize</h3><p>该属性设置<code>BlockingQueue</code>实现的最大队列大小。 </p><p>如果将其设置为<code>-1</code>，则将使用<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/SynchronousQueue.html" target="_blank" rel="noopener">SynchronousQueue</a>，其它正值将使用<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/LinkedBlockingQueue.html" target="_blank" rel="noopener">LinkedBlockingQueue</a>。</p><p><strong>注意：</strong> 这个属性只适用于初始化时间，因为如果不重新初始化线程执行器，不支持的队列被调整或改变。 </p><p>如果您需要越过此限制并允许在队列中进行动态更改，请参阅<code>queueSizeRejectionThreshold</code>属性。</p><p>要在<code>SynchronousQueue</code>和<code>LinkedBlockingQueue</code>之间切换，需要重新启动。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>-1</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.maxQueueSize</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.maxQueueSize</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withMaxQueueSize(int value)</code></td></tr></tbody></table><h3 id="queueSizeRejectionThreshold"><a href="#queueSizeRejectionThreshold" class="headerlink" title="queueSizeRejectionThreshold"></a>queueSizeRejectionThreshold</h3><p>此属性设置队列大小拒绝阈值 —— 即使<code>maxQueueSize</code>尚未达到，拒绝将发生的人为最大队列大小。此属性的存在是因为<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html" target="_blank" rel="noopener">BlockingQueue</a>的<code>maxQueueSize</code>不能动态更改，我们希望允许您动态更改影响拒绝的队列大小。 </p><p>当排队一个线程执行时，<code>HystrixCommand</code>使用它。 </p><p><strong>注意：</strong> 如果<code>maxQueueSize == -1</code>，则此属性不适用。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>5</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.queueSizeRejectionThreshold</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withQueueSizeRejectionThreshold(int value)</code></td></tr></tbody></table><h3 id="keepAliveTimeMinutes"><a href="#keepAliveTimeMinutes" class="headerlink" title="keepAliveTimeMinutes"></a>keepAliveTimeMinutes</h3><p>该属性设置保持活动时间，以分钟为单位。 在<code>1.5.9</code>之前，所有线程池都是固定大小的，如<code>coreSize == maximumSize</code>。在<code>1.5.9</code>之后，将<code>allowMaximumSizeToDivergeFromCoreSize</code>设置为<code>true</code>允许这两个值发散，以便线程池可以获取/释放线程。如果<code>coreSize &lt;maximumSize</code>，那么这个属性控制一个线程在被释放之前将不被使用的时间。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>1</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.keepAliveTimeMinutes</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.keepAliveTimeMinutes</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withKeepAliveTimeMinutes(int value)</code></td></tr></tbody></table><h3 id="allowMaximumSizeToDivergeFromCoreSize"><a href="#allowMaximumSizeToDivergeFromCoreSize" class="headerlink" title="allowMaximumSizeToDivergeFromCoreSize"></a>allowMaximumSizeToDivergeFromCoreSize</h3><p>在<code>1.5.9</code>中添加。此属性允许<code>maximumSize</code>的配置生效。该值可以等于或高于<code>coreSize</code>。设置<code>coreSize &lt;maximumSize</code>会创建一个线程池，它可以支持<code>maximumSize</code>并发性，但是会在相对不活动的时间内将线程返回给系统。 （以<code>keepAliveTimeInMinutes</code>为准）</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>false</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.allowMaximumSizeToDivergeFromCoreSize</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withAllowMaximumSizeToDivergeFromCoreSize(boolean value)</code></td></tr></tbody></table><h3 id="metrics-rollingStats-timeInMilliseconds-1"><a href="#metrics-rollingStats-timeInMilliseconds-1" class="headerlink" title="metrics.rollingStats.timeInMilliseconds"></a>metrics.rollingStats.timeInMilliseconds</h3><p>该属性设置统计滚动窗口的持续时间，以毫秒为单位。这是为线程池保留多长时间的指标。</p><p>窗口根据这些增量被分成桶和“卷”。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10000</code></th></tr></thead><tbody><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default..metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.metrics.rollingStats.timeInMilliseconds</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withMetricsRollingStatisticalWindowInMilliseconds(int value)</code></td></tr></tbody></table><h3 id="metrics-rollingStats-numBuckets-1"><a href="#metrics-rollingStats-numBuckets-1" class="headerlink" title="metrics.rollingStats.numBuckets"></a>metrics.rollingStats.numBuckets</h3><p>该属性设置滚动统计窗口分成的桶的数量。 </p><p><strong>注意：</strong> 必须要确保如下条件：“<code>metrics.rollingStats.timeInMilliseconds ％ metrics.rollingStats.numBuckets == 0</code>” ，否则会引发异常。</p><p>换句话说，10000/10是可以的，10000/20也可以，但是10000/7不行。</p><table><thead><tr><th>默认值</th><th style="text-align:left"><code>10</code></th></tr></thead><tbody><tr><td><strong>取值范围</strong></td><td style="text-align:left">能被<code>metrics.rollingStats.timeInMilliseconds</code>整除的任何值，结果应该是数百或数千毫秒的桶。大容量的性能还没有测试过小于100ms的桶。</td></tr><tr><td><strong>默认属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.default.metrics.rollingStats.numBuckets</code></td></tr><tr><td><strong>实例属性</strong></td><td style="text-align:left"><code>hystrix.threadpool.HystrixThreadPoolKey.metrics.rollingStats.numBuckets</code></td></tr><tr><td><strong>如何设置<br>默认实例</strong></td><td style="text-align:left"><code>HystrixThreadPoolProperties.Setter().withMetricsRollingStatisticalWindowBuckets(int value)</code></td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p><style>table th:first-of-type{width:80px}</style>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Hystrix使用&lt;a href=&quot;https://github.com/Netflix/archaius&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Archaius&lt;/a&gt;作为配置属性的默认实现。&lt;/p&gt;&lt;p&gt;下面的文档描述了默认使用的&lt;a href=&quot;http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/properties/HystrixPropertiesStrategy.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HystrixPropertiesStrategy&lt;/a&gt;实现，你也可以使用&lt;a href=&quot;https://github.com/Netflix/Hystrix/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;插件&lt;/a&gt;的方式来覆盖它。&lt;/p&gt;&lt;p&gt;每个属性有四个优先级：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码的全局默认值&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果没有设置以下3个，则这是默认值。 全局默认值在下表中显示为 &lt;strong&gt;“默认值”&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;动态全局默认属性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;你可以使用属性更改全局默认值。 全局默认属性名称在下表中显示为 &lt;strong&gt;“默认属性”&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/"/>
    
    
      <category term="java" scheme="http://zyouwei.com/tags/java/"/>
    
      <category term="hystrix" scheme="http://zyouwei.com/tags/hystrix/"/>
    
      <category term="微服务" scheme="http://zyouwei.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下基于Python2.7安装OpenCV3</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/MacOs-install-opencv.html"/>
    <id>http://zyouwei.com/技术笔记/工具类/MacOs-install-opencv.html</id>
    <published>2017-12-13T01:28:37.000Z</published>
    <updated>2017-12-13T04:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h2><ol><li>安装<code>Xcode</code>以及<code>Apple Command Line Tools</code></li><li>安装<code>Homebrew</code></li><li>创建<code>Python</code>虚拟环境</li><li>安装<code>NumPy</code></li><li>安装<code>OpenCV</code></li></ol><a id="more"></a><h2 id="安装Xcode以及Apple-Command-Line-Tools"><a href="#安装Xcode以及Apple-Command-Line-Tools" class="headerlink" title="安装Xcode以及Apple Command Line Tools"></a>安装<code>Xcode</code>以及<code>Apple Command Line Tools</code></h2><ol><li>从<a href="https://itunes.apple.com/app/xcode/id497799835" target="_blank" rel="noopener">App Store</a>下载并安装Xcode。</li><li><p>接受Apple开发者协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcodebuild -license</span><br></pre></td></tr></table></figure></li><li><p>安装<code>Apple Command Line Tools</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure><p> 输入上面的命令后，会弹出一个窗口，确认你想要安装命令行工具，点击<code>install</code>或<code>安装</code>按钮进行安装。</p></li></ol><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装<code>Homebrew</code></h2><p><a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>是MacOS的包管理器，类似于<code>Ubuntu</code>的<code>apt-get</code>。</p><ol><li><p>安装命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>一旦安装了Homebrew，您应该对其进行更新，以确保下载最新的软件包定义：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure></li><li><p>修改环境变量文件，如果你用的是<code>bash</code>请球盖<code>vi ~/.bash_profile</code>，如果你用的是<code>zsh</code>请修改<code>vi ~/.zshrc</code>，添加如下内容到对应的文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Homebrew</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>source</code>命名来让配置生效：<code>source ~/.bash_profile</code> 或 <code>source ~/.zshrc</code>。</p></li></ol><h2 id="创建Python虚拟环境"><a href="#创建Python虚拟环境" class="headerlink" title="创建Python虚拟环境"></a>创建<code>Python</code>虚拟环境</h2><ol><li><p><code>MacOS</code>默认已安装<code>Python</code>，不同的<code>MacOS</code>版本可能对应的<code>Python</code>版本不同。可以使用<code>python --version</code>来获取当前系统中的<code>Python</code>版本。如果当前版本不是<code>2.7.x</code>，可以使用<code>Homebrew</code>来安装：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python</span><br></pre></td></tr></table></figure><p> 安装完成之后，我们需要把操作系统的<code>python</code>链接到<code>Homebrew</code>的安装目录：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew linkapps python</span><br></pre></td></tr></table></figure><p> 检查安装是否正确：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure><p> 如果输出的路径是<code>/usr/local/bin/python</code>则说明安装<code>Python</code>成功。</p></li><li><p>安装虚拟环境 </p><p> 由于在OS X El Capitan中，在内核下引入了Rootless机制，即使root用户也无法对<code>/System</code>、<code>/bin</code>、<code>/sbin</code>、<code>/usr(except /usr/local)</code>目录有写和执行权限，只有Apple以及Apple授权签名的软件（包括命令行工具）可以修改此目录。</p><p> 因此在使用操作系统自带的<code>Python</code>时，使用<code>pip</code>安装某些包时会存在失败的情况。所以我们在这里使用<code>python</code>虚拟环境来规避这个问题。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure><p> 安装完成之后，我们需要再次修改环境变量文件，如果你用的是<code>bash</code>请球盖<code>vi ~/.bash_profile</code>，如果你用的是<code>zsh</code>请修改<code>vi ~/.zshrc</code>，添加如下内容到对应的文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Virtualenv/VirtualenvWrapper</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p> 使用<code>source</code>命名来让配置生效：<code>source ~/.bash_profile</code> 或 <code>source ~/.zshrc</code>。</p></li><li><p>创建虚拟环境</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv opencv</span><br></pre></td></tr></table></figure><p> 上面命名创建了一个名叫<code>opencv</code>的虚拟环境，你可以使用<code>workon opencv</code>进入虚拟环境，也可以使用<code>deactivate</code>指令从虚拟环境中退出。</p></li></ol><h2 id="安装NumPy"><a href="#安装NumPy" class="headerlink" title="安装NumPy"></a>安装<code>NumPy</code></h2><ol><li>进入虚拟环境: <code>workon opencv</code></li><li><code>pip install numpy</code></li></ol><h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装<code>OpenCV</code></h2><ol><li><p>环境准备：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake pkg-config</span><br><span class="line">brew install jpeg libpng libtiff openexr</span><br><span class="line">brew install eigen tbb</span><br></pre></td></tr></table></figure></li><li><p>从github下载OpenCV3</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/opencv/opencv_contrib</span><br></pre></td></tr></table></figure><p> 下载完成之后，进入源码目录切换到指定的版本，譬如安装OpenCV的3.3.1版本：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">git checkout -b 3.3.1 3.3.1</span><br><span class="line"><span class="built_in">cd</span> ~/opencv_contrib</span><br><span class="line">git checkout -b 3.3.1 3.3.1</span><br></pre></td></tr></table></figure></li><li><p>配置<code>CMake</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure><p> 接着我们就可以执行<code>cmake</code>命令了，但在执行命令之前有两个参数需要调整：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span> \</span><br><span class="line">-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \</span><br><span class="line">-D PYTHON2_LIBRARY=YYY \</span><br><span class="line">-D PYTHON2_INCLUDE_DIR=ZZZ \</span><br><span class="line">-D PYTHON2_EXECUTABLE=/usr/<span class="built_in">local</span>/bin/python \</span><br><span class="line">-D BUILD_opencv_python2=ON \</span><br><span class="line">-D BUILD_opencv_python3=OFF \</span><br><span class="line">-D INSTALL_PYTHON_EXAMPLES=ON \</span><br><span class="line">-D INSTALL_C_EXAMPLES=OFF \</span><br><span class="line">-D BUILD_EXAMPLES=ON ..</span><br></pre></td></tr></table></figure><p> <strong>cmake重要参数解释：</strong> </p><ol><li><code>BUILD_opencv_python2=ON</code>：这表明我们要基于Python2.7来安装OpenCV 3；</li><li><code>BUILD_opencv_python3=OFF</code>：这表明我们关闭Python3；</li><li><code>PYTHON2_LIBRARY=YYY</code>：这是你自己填写的第一个值。您将需要用您的<code>libpython2.7.dylib</code>文件的路径替换<code>YYY</code>（我将帮助您在下一节中找到它）；</li><li><p><code>PYTHON2_INCLUDE_DIR=ZZZ</code>：这是您需要填写的第二个值。您需要将<code>ZZZ</code>替换为<code>Python.h</code>头文件所在目录的路径（同样，我将帮助您确定此路径）</p><p><strong>获取<code>PYTHON2_LIBRARY</code>的路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/<span class="built_in">local</span>/Cellar/python/2.7.*/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config/libpython2.7.dylib</span><br></pre></td></tr></table></figure><p>将上面的输出拷贝出来替换掉<code>PYTHON2_LIBRARY=YYY</code>中的<code>YYY</code>。</p><p><strong>获取<code>PYTHON2_INCLUDE_DIR</code>的路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -d /usr/<span class="built_in">local</span>/Cellar/python/2.7.*/Frameworks/Python.framework/Versions/2.7/include/python2.7/</span><br></pre></td></tr></table></figure><p>将上面的输出拷贝出来替换掉<code>PYTHON2_INCLUDE_DIR=ZZZ</code>中的<code>ZZZ</code>。</p><p>替换完成之后即可执行。</p></li></ol></li><li><p>编译与安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure><p> <code>-j</code>开关控制并发编译OpenCV的处理器数量，因为我在四核系统上，所以我用<code>-j4</code>。编译可能需要几十分钟左右。</p><p> 如果编译没有出错就可以进行安装了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p> 安装成功后，可以在<code>/usr/local/lib/python2.7/site-packges/</code>下找到<code>cv2.so</code>文件。</p></li><li><p>在虚拟环境中添加<code>cv2.so</code>的软连接</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python2.7/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python2.7/site-packages/cv2.so cv2.so cv2.so</span><br></pre></td></tr></table></figure></li><li><p>测试与验证OpenCV</p><p> 打开一个新的终端：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ workon opencv</span><br><span class="line">$ python</span><br><span class="line">Python 2.7.12 (default, Oct 11 2016, 05:20:59) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt; cv2.__version__</span><br><span class="line"><span class="string">'3.3.1</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="如何完整的卸载OpenCV"><a href="#如何完整的卸载OpenCV" class="headerlink" title="如何完整的卸载OpenCV?"></a>如何完整的卸载OpenCV?</h2><ul><li>可以通过进入之前的build目录，执行<code>make uninstall</code>来完整卸载OpenCV.</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.pyimagesearch.com/2016/11/28/macos-install-opencv-3-and-python-2-7/" target="_blank" rel="noopener">MacOS基于Python2.7安装OpenCV3</a></li><li><a href="https://www.pyimagesearch.com/2016/12/05/macos-install-opencv-3-and-python-3-5/" target="_blank" rel="noopener">MacOS基于Python3.5安装OpenCV3</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;步骤概览&quot;&gt;&lt;a href=&quot;#步骤概览&quot; class=&quot;headerlink&quot; title=&quot;步骤概览&quot;&gt;&lt;/a&gt;步骤概览&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;安装&lt;code&gt;Xcode&lt;/code&gt;以及&lt;code&gt;Apple Command Line Tools&lt;/code&gt;&lt;/li&gt;&lt;li&gt;安装&lt;code&gt;Homebrew&lt;/code&gt;&lt;/li&gt;&lt;li&gt;创建&lt;code&gt;Python&lt;/code&gt;虚拟环境&lt;/li&gt;&lt;li&gt;安装&lt;code&gt;NumPy&lt;/code&gt;&lt;/li&gt;&lt;li&gt;安装&lt;code&gt;OpenCV&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="python" scheme="http://zyouwei.com/tags/python/"/>
    
      <category term="opencv" scheme="http://zyouwei.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Geetest拖拽验证码破解思路（java）</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/Geetest-Crack.html"/>
    <id>http://zyouwei.com/技术笔记/工具类/Geetest-Crack.html</id>
    <published>2017-11-24T08:29:56.000Z</published>
    <updated>2018-01-05T02:17:48.175Z</updated>
    
    <content type="html"><![CDATA[<p>项目中有个需求希望能获取公司的工商注册信息，刚开始是想与第三方数据公司合作，因种 种原因合作没有达成。于是想做个爬虫直接从工商局的《企业信用信息公示系统》中获取。 要想从《企业信用信息公示系统》中爬取数据，首先必须解决掉<code>Geetest</code>验证码的问题。 经过一系列的摸索，发现要想破解<code>geetest</code>的验证码，主要需要解决如下几个问题：</p><ol><li>背景图的还原</li><li>找到背景图中缺口的位置</li><li>将滑块拖拽到缺口</li></ol><a id="more"></a><h2 id="背景图的还原"><a href="#背景图的还原" class="headerlink" title="背景图的还原"></a>背景图的还原</h2><p><code>Geetest</code>背景图分为两张，一张是完整背景图，一张是带缺口的背景图。每张图片被分成 52 份， 上下两部分各 26 份，然后乱序排列。在网页上显示时，是通过<code>css</code>来将乱序的 碎片重新组列成完整的图片。</p><p>乱序图片：<img src="/images/posts/2017-11/9f9cff207.jpg" alt="origin_img"></p><p>正常图片：<img src="/images/posts/2017-11/re_9f9cff207.jpg" alt="show_img"></p><p>因此，我们必须将原始的背景乱序图片切根据页面上的<code>css</code>样式将图片切割成 52 份，并 按照先后顺序拼接还原成正确的图片。需要使用到<code>java.awt.image.BufferedImage</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将Geetest打乱的图片还原，Geetest的原始背景图是分成52份碎片乱序组合的。目前是上下各26份，每份碎片图片宽10px， 高58px。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image     原始背景图</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> locations 展示位置列表，数据结构：[&#123;x=-25, y=-58&#125;, ...]</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 顺序排列好的图片</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">recover</span><span class="params">(BufferedImage image, List&lt;Map&lt;String, Integer&gt;&gt; locations)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> per_image_with = <span class="number">10</span>;  <span class="comment">// 每张碎片图片的宽度</span></span><br><span class="line">    <span class="keyword">int</span> per_image_height = <span class="number">58</span>; <span class="comment">// 每张碎片图片的高度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;BufferedImage&gt; upperList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;BufferedImage&gt; downList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将原始图片裁剪成碎片</span></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Integer&gt; location : locations) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = location.get(<span class="string">"x"</span>);</span><br><span class="line">        <span class="keyword">int</span> y = location.get(<span class="string">"y"</span>);</span><br><span class="line">        <span class="keyword">if</span> (y == -<span class="number">58</span>) &#123;</span><br><span class="line">            upperList.add(image.getSubimage(abs(x), <span class="number">58</span>, per_image_with, per_image_height));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">            downList.add(image.getSubimage(abs(x), <span class="number">0</span>, per_image_with, per_image_height));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BufferedImage newImage = <span class="keyword">new</span> BufferedImage(upperList.size() * per_image_with, image.getHeight(), image.getType());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重绘图片的上半部分</span></span><br><span class="line">    <span class="keyword">int</span> x_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (BufferedImage bufferedImage : upperList) &#123;</span><br><span class="line">        Graphics graphics = newImage.getGraphics();</span><br><span class="line">        graphics.drawImage(bufferedImage, x_offset, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        x_offset += bufferedImage.getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重绘图片的下半部分</span></span><br><span class="line">    x_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (BufferedImage bufferedImage : downList) &#123;</span><br><span class="line">        Graphics graphics = newImage.getGraphics();</span><br><span class="line">        graphics.drawImage(bufferedImage, x_offset, <span class="number">58</span>, <span class="keyword">null</span>);</span><br><span class="line">        x_offset += bufferedImage.getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"还原图片耗时：&#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找到背景图中缺口的位置"><a href="#找到背景图中缺口的位置" class="headerlink" title="找到背景图中缺口的位置"></a>找到背景图中缺口的位置</h2><p> 正常图片： <img src="/images/posts/2017-11/re_9f9cff207.jpg" alt="正常图片"></p><p> 缺口图片： <img src="/images/posts/2017-11/qk_9f9cff207.jpg" alt=" 缺口图片"></p><p><code>Geetest</code>验证时，只需要将拼图块水平移动到正确的位置即可。因此通过上面两张图片比对，发现我们只要找到缺口的<code>x</code>坐标即可。</p><p>这里我借用的参考内容的方法：两张原始图的大小都是相同的 260*116，那就通过两个for 循环依次对比每个像素点的 RGB 值，如果相差超过 50 则就认为找到了缺口的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算验证图的缺口位置（x轴） 两张原始图的大小都是相同的260*116，那就通过两个for循环依次对比每个像素点的RGB值， 如果RGB三元素中有一个相差超过50则就认为找到了缺口的位置</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image1 图像1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image2 图像2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 缺口的x坐标</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDiffX</span><span class="params">(BufferedImage image1, BufferedImage image2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; image1.getWidth(); x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; image1.getHeight(); y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isSimilar(image1, image2, x, y)) &#123;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"图片对比耗时：&#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断image1, image2的[x, y]这一像素是否相似，如果该像素的RGB值相差都在50以内，则认为相似。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> image1   图像1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> image2   图像2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x_offset x坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y_offset y坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否相似</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimilar</span><span class="params">(BufferedImage image1, BufferedImage image2, <span class="keyword">int</span> x_offset, <span class="keyword">int</span> y_offset)</span> </span>&#123;</span><br><span class="line">    Color pixel1 = <span class="keyword">new</span> Color(image1.getRGB(x_offset, y_offset));</span><br><span class="line">    Color pixel2 = <span class="keyword">new</span> Color(image2.getRGB(x_offset, y_offset));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> abs(pixel1.getBlue() - pixel2.getBlue()) &lt; <span class="number">50</span> &amp;&amp; abs(pixel1.getGreen() - pixel2.getGreen()) &lt; <span class="number">50</span> &amp;&amp; abs(pixel1.getRed() - pixel2.getRed()) &lt; <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将滑块拖拽到缺口"><a href="#将滑块拖拽到缺口" class="headerlink" title="将滑块拖拽到缺口"></a>将滑块拖拽到缺口</h2><p><code>Geetest</code>在拖拽拼图块时，对拼图块的移动轨迹做了一些 “ 人工智能 ” 的算法识别，使用程序直接将拼图块拖入缺口时，发现有很大的概率会被识别为机器操作，页面显示<code>怪物吃掉了饼图</code>。因此我们需要采用一些算法来模拟人拖拽的行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据缺口位置x_offset，仿照手动拖动滑块时的移动轨迹。</span></span><br><span class="line"><span class="comment">  * 手动拖动滑块有几个特点：</span></span><br><span class="line"><span class="comment">  * 开始时拖动速度快，最后接近目标时会慢下来；</span></span><br><span class="line"><span class="comment">  * 总时间大概1~3秒；</span></span><br><span class="line"><span class="comment">  * 有可能会拖超过后再拖回头；</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回一个轨迹数组，数组中的每个轨迹都是[x,y,z]三元素：x代表横向位移，y代表竖向位移，z代表时间间隔，单位毫秒</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; getTrack(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际上滑块的起始位置并不是在图像的最左边，而是大概有6个像素的距离，所以滑动距离要减掉这个长度</span></span><br><span class="line">    x_offset = x_offset - <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getRandom(<span class="number">0</span>, <span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        tracks = strategics_1(x_offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tracks = strategics_2(x_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"生成轨迹耗时: &#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    log.debug(<span class="string">"计算出移动轨迹: &#123;&#125;"</span>, tracks);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 轨迹策略1</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; strategics_1(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">float</span> totalTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = getRandom(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机按1~3的步长生成各个点</span></span><br><span class="line">    <span class="keyword">while</span> (x_offset - x &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, x);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, <span class="number">0</span>);</span><br><span class="line">        tracks.add(point);</span><br><span class="line"></span><br><span class="line">        x_offset = x_offset - x;</span><br><span class="line">        x = getRandom(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面几个点放慢时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x_offset; i++) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, <span class="number">1</span>);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        tracks.add(point);</span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"预计拖拽耗时: &#123;&#125;ms"</span>, totalTime);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 轨迹策略2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; strategics_2(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">float</span> totalTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dragX = <span class="number">0</span>; <span class="comment">// 已拖拽的横向偏移量</span></span><br><span class="line">    <span class="keyword">int</span> nearRange = getRandom(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 靠近缺口的范围</span></span><br><span class="line">    <span class="keyword">while</span> (dragX &lt; x_offset - nearRange) &#123; <span class="comment">// 生成快速拖拽点，拖拽距离非常靠近切口</span></span><br><span class="line">        <span class="keyword">int</span> stepLength = getRandom(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// 随机按1~5的步长生成各个点</span></span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, stepLength);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, getRandom(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        tracks.add(point);</span><br><span class="line"></span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        dragX += stepLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机一定的比例将滑块拖拽过头</span></span><br><span class="line">    <span class="keyword">if</span> (getRandom(<span class="number">0</span>, <span class="number">99</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> stepLength = getRandom(<span class="number">10</span>, <span class="number">15</span>); <span class="comment">// 随机按1~5的步长生成各个点</span></span><br><span class="line">        Map&lt;String, Integer&gt; attachPoint = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        attachPoint.put(<span class="string">"x"</span>, stepLength);</span><br><span class="line">        attachPoint.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        attachPoint.put(<span class="string">"z"</span>, getRandom(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        tracks.add(attachPoint);</span><br><span class="line"></span><br><span class="line">        dragX += stepLength;</span><br><span class="line">        totalTime += attachPoint.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 精确点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.abs(dragX - x_offset); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dragX &gt; x_offset) &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">            point.put(<span class="string">"x"</span>, -<span class="number">1</span>);</span><br><span class="line">            point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">            point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">100</span>));</span><br><span class="line">            tracks.add(point);</span><br><span class="line"></span><br><span class="line">            totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">            point.put(<span class="string">"x"</span>, <span class="number">1</span>);</span><br><span class="line">            point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">            point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">100</span>));</span><br><span class="line">            tracks.add(point);</span><br><span class="line"></span><br><span class="line">            totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"预计拖拽耗时: &#123;&#125;ms"</span>, totalTime);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据移动轨迹，模拟拖动极验的验证滑块</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">simulateDrag</span><span class="params">(WebDriver webDriver, Site site, List&lt;Map&lt;String, Integer&gt;&gt; tracks)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"开始模拟拖动滑块"</span>);</span><br><span class="line"></span><br><span class="line">    WebElement slider = webDriver.findElement(By.cssSelector(site.getGeetest().getSliderKnob()));</span><br><span class="line">    log.debug(<span class="string">"滑块初始位置: &#123;&#125;"</span>, slider.getLocation());</span><br><span class="line"></span><br><span class="line">    Actions actions = <span class="keyword">new</span> Actions(webDriver);</span><br><span class="line">    actions.clickAndHold(slider).perform();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Integer&gt; point : tracks) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = point.get(<span class="string">"x"</span>) + <span class="number">22</span>;</span><br><span class="line">        <span class="keyword">int</span> y = point.get(<span class="string">"y"</span>) + <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">        actions.moveToElement(slider, x, y).perform();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> z = point.get(<span class="string">"z"</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(getRandom(<span class="number">100</span>, <span class="number">200</span>)); <span class="comment">// 随机停顿100~200毫秒</span></span><br><span class="line">    actions.release(slider).perform();</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>); <span class="comment">// 等待0.1秒后检查结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 在5秒之内检查弹出框是否消失，如果消失则说明校验通过；如果没有消失说明校验失败。</span></span><br><span class="line">        <span class="keyword">new</span> WebDriverWait(webDriver, <span class="number">5</span>).until((ExpectedCondition&lt;Boolean&gt;) driver -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WebElement popupElement = driver.findElement(By.cssSelector(site.getGeetest().getPopupWrap()));</span><br><span class="line">                <span class="keyword">return</span> !popupElement.isDisplayed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 元素不存在也返回true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决好上面的三点之后，<code>Geetest</code>验证基本就破解掉了，但是要爬取<code>企业信用信息公示系统</code>中的数据还有一些事情要做。目前工商局有多个地区系统，每个系统的页面解析处理也不一样。某些地区系统甚至还针对访问频次做了控制，你可以通过 IP 代理来解决。</p><p>完整的代码示例请参考: <a href="https://github.com/aqlu/geetest-crack" target="_blank" rel="noopener">https://github.com/aqlu/geetest-crack</a></p><p>运行效果：<img src="http://obbrvjuch.bkt.clouddn.com/blog/posts/2017-11/Kapture.gif" alt="效果图"></p><p>本文的参考资料：<a href="http://blog.csdn.net/paololiu/article/details/52514504" target="_blank" rel="noopener">http://blog.csdn.net/paololiu/article/details/52514504</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中有个需求希望能获取公司的工商注册信息，刚开始是想与第三方数据公司合作，因种 种原因合作没有达成。于是想做个爬虫直接从工商局的《企业信用信息公示系统》中获取。 要想从《企业信用信息公示系统》中爬取数据，首先必须解决掉&lt;code&gt;Geetest&lt;/code&gt;验证码的问题。 经过一系列的摸索，发现要想破解&lt;code&gt;geetest&lt;/code&gt;的验证码，主要需要解决如下几个问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;背景图的还原&lt;/li&gt;&lt;li&gt;找到背景图中缺口的位置&lt;/li&gt;&lt;li&gt;将滑块拖拽到缺口&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="geetest" scheme="http://zyouwei.com/tags/geetest/"/>
    
      <category term="验证码破解" scheme="http://zyouwei.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="java" scheme="http://zyouwei.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MacOS科学上网</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/MacOs-scientific-Surf-the-Internet.html"/>
    <id>http://zyouwei.com/技术笔记/工具类/MacOs-scientific-Surf-the-Internet.html</id>
    <published>2017-11-21T07:07:27.000Z</published>
    <updated>2017-11-21T10:00:54.990Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在MacOS上采用<a href="https://www.v2ray.com/chapter_04/03_vmess.html" target="_blank" rel="noopener">VMess</a>协议与<code>墙外VPS</code>通信，其中主要用到了[v2ray]这款开源工具。</p><h2 id="服务端安装-Centos"><a href="#服务端安装-Centos" class="headerlink" title="服务端安装(Centos)"></a>服务端安装(Centos)</h2><p>因为我选择的VPS的Centos的操作系统，所以此章节主要基于Centos操作系统来描述。</p><ol><li>安装包下载：<code>wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-linux-64.zip</code></li><li>解压安装包到<code>/opt</code>目录：<code>unzip v2ray-linux-64.zip -d /opt</code></li><li><p>编写配置文件:</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/v2ray-v2.40-linux-64</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure><p> config.json内容：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"log"</span> : &#123; <span class="comment">// 日志输出配置</span></span><br><span class="line">        <span class="string">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">        <span class="string">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">        <span class="string">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对外提供 vmess 协议</span></span><br><span class="line">    <span class="string">"inbound"</span>: &#123;</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">28399</span>,  <span class="comment">// 监听端口</span></span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"clients"</span>: [&#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"3b129ddd-72a3-4d28-aeee-028a0fe86e33"</span>, <span class="comment">// 可以随机生成一个，但必须保证服务端ID与客户端ID必须保持一致</span></span><br><span class="line">                <span class="string">"level"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">                <span class="string">"security"</span>: <span class="string">"aes-128-gcm"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"outbound"</span>: &#123;</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"routing"</span>: &#123;</span><br><span class="line">        <span class="string">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"rules"</span>: [&#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">                <span class="string">"ip"</span>: [</span><br><span class="line">                    <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">                    <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">                    <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">                    <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">                    <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">                    <span class="string">"::1/128"</span>,</span><br><span class="line">                    <span class="string">"fc00::/7"</span>,</span><br><span class="line">                    <span class="string">"fe80::/10"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动<code>v2ray</code>服务：<code>/opt/v2ray-v2.40-linux-64/v2ray -config=/opt/v2ray-v2.40-linux-64/config.json &gt; v2ray.log &amp;</code></p></li></ol><h2 id="客户端安装-MacOs"><a href="#客户端安装-MacOs" class="headerlink" title="客户端安装(MacOs)"></a>客户端安装(MacOs)</h2><ol><li>安装包下载：<code>wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-macos.zip</code></li><li>解压安装包到<code>/usr/local/opt</code>目录：<code>unzip v2ray-linux-64.zip -d /usr/local/opt</code></li><li><p>编写配置文件:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/v2ray-v2.40-linux-64</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure><p> config.json内容：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"log"</span> : &#123;</span><br><span class="line">        <span class="string">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">        <span class="string">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">        <span class="string">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对外提供 socks5 协议</span></span><br><span class="line">    <span class="string">"inbound"</span>: &#123;</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">1080</span>, <span class="comment">// 监听端口</span></span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"socks"</span>, <span class="comment">// 入口协议为 SOCKS 5</span></span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"auth"</span>: <span class="string">"noauth"</span>  <span class="comment">//socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"outbound"</span>: &#123;</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 出口协议，对应服务端的入口协议</span></span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"vnext"</span>: [&#123;</span><br><span class="line">                <span class="string">"address"</span>: <span class="string">"serveraddr.com"</span>, <span class="comment">// 服务器地址，请修改为你自己的服务器 ip 或域名</span></span><br><span class="line">                <span class="string">"port"</span>: <span class="number">28399</span>,  <span class="comment">// 服务器端口，对应服务器端入口的端口</span></span><br><span class="line">                <span class="string">"users"</span>: [&#123;</span><br><span class="line">                    <span class="string">"id"</span>: <span class="string">"3b129ddd-72a3-4d28-aeee-028a0fe86e33"</span>, <span class="comment">// 用户ID, 服务端ID与客户端ID必须保持一致</span></span><br><span class="line">                    <span class="string">"alterId"</span>: <span class="number">64</span> <span class="comment">// 此处的值也应当与服务器相同</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"routing"</span>: &#123;</span><br><span class="line">        <span class="string">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"rules"</span>: [&#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">                <span class="string">"ip"</span>: [</span><br><span class="line">                    <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">                    <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">                    <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">                    <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">                    <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">                    <span class="string">"::1/128"</span>,</span><br><span class="line">                    <span class="string">"fc00::/7"</span>,</span><br><span class="line">                    <span class="string">"fe80::/10"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动<code>v2ray</code>服务：<code>/usr/local/opt/v2ray-v2.40-linux-64/v2ray -config=/usr/local/opt/v2ray-v2.40-linux-64/config.json &gt; v2ray.log &amp;</code></p></li></ol><h2 id="客户端安装的另一种方式（基于Docker安装）"><a href="#客户端安装的另一种方式（基于Docker安装）" class="headerlink" title="客户端安装的另一种方式（基于Docker安装）"></a>客户端安装的另一种方式（基于Docker安装）</h2><ol><li>下载镜像： <code>docker pull v2ray/official</code></li><li><p>编写配置文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/v2ray</span><br><span class="line"><span class="built_in">cd</span> ~/v2ray</span><br><span class="line">vi config.json <span class="comment"># 内容请参考客户端安装(MacOs)</span></span><br></pre></td></tr></table></figure></li><li><p>创建容器：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name v2ray -v ~/v2ray:/etc/v2ray -p 1080:1080 v2ray/official v2ray -config=/etc/v2ray/config.json</span><br></pre></td></tr></table></figure><blockquote><p><code>-p</code> 后面跟的端口为<code>config.json</code>中<code>inbound</code>配置的监听端口</p></blockquote></li><li>校验容器是否创建成功：<code>docker container ls</code></li><li>启动容器：<code>docker start</code></li><li>停止v2ray：<code>docker stop v2ray</code></li><li>重启v2ray：<code>docker restart v2ray</code></li><li>查看日志：<code>docker container log  v2ray</code></li></ol><h2 id="更多参考资料"><a href="#更多参考资料" class="headerlink" title="更多参考资料"></a>更多参考资料</h2><ul><li>项目：<a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core</a></li><li>用户手册：<a href="https://www.v2ray.com/" target="_blank" rel="noopener">https://www.v2ray.com/</a></li><li>其它文档：<a href="https://toutyrater.github.io/" target="_blank" rel="noopener">https://toutyrater.github.io/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍如何在MacOS上采用&lt;a href=&quot;https://www.v2ray.com/chapter_04/03_vmess.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VMess&lt;/a&gt;协议与&lt;code&gt;墙外VPS&lt;/code&gt;通信，其中主要用到了[v2ray]这款开源工具。&lt;/p&gt;&lt;h2 id=&quot;服务端安装-Centos&quot;&gt;&lt;a href=&quot;#服务端安装-Centos&quot; class=&quot;headerlink&quot; title=&quot;服务端安装(Centos)&quot;&gt;&lt;/a&gt;服务端安装(Centos)&lt;/h2&gt;&lt;p&gt;因为我选择的VPS的Centos的操作系统，所以此章节主要基于Centos操作系统来描述。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;安装包下载：&lt;code&gt;wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-linux-64.zip&lt;/code&gt;&lt;/li&gt;&lt;li&gt;解压安装包到&lt;code&gt;/opt&lt;/code&gt;目录：&lt;code&gt;unzip v2ray-linux-64.zip -d /opt&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编写配置文件:&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="vmess" scheme="http://zyouwei.com/tags/vmess/"/>
    
      <category term="翻墙" scheme="http://zyouwei.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://zyouwei.com//hello-world.html"/>
    <id>http://zyouwei.com//hello-world.html</id>
    <published>2017-11-21T04:35:00.000Z</published>
    <updated>2017-11-21T09:11:42.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>这是我的第一篇博客，感谢<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>提供了一个简单好用的博客框架，感谢<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>优雅的的主题。</p><p>此博客是<a href="./about/index.html">本人</a>的一个杂记。为什么叫杂记？其实就是一些乱七八糟的东西，可能是曾经的一些技术笔记，也可能是一些技术专题的连载，也可能是一些生活观点与琐事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;Hello World!&lt;/h2&gt;&lt;p&gt;这是我的第一篇博客，感谢&lt;a href=&quot;https://hex
      
    
    </summary>
    
    
  </entry>
  
</feed>
