<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿叩·杂记</title>
  
  <subtitle>学着写博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zyouwei.com/"/>
  <updated>2017-11-27T12:40:07.561Z</updated>
  <id>http://zyouwei.com/</id>
  
  <author>
    <name>Angus_Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Geetest拖拽验证码破解思路（java）</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/Geetest-Crack.html"/>
    <id>http://zyouwei.com/技术笔记/工具类/Geetest-Crack.html</id>
    <published>2017-11-24T08:29:56.000Z</published>
    <updated>2017-11-27T12:40:07.561Z</updated>
    
    <content type="html"><![CDATA[<p>项目中有个需求希望能获取公司的工商注册信息，刚开始是想与第三方数据公司合作，因种<br>种原因合作没有达成。于是想做个爬虫直接从工商局的《企业信用信息公示系统》中获取。<br>要想从《企业信用信息公示系统》中爬取数据，首先必须解决掉<code>Geetest</code>验证码的问题。<br>经过一系列的摸索，发现要想破解<code>geetest</code>的验证码，主要需要解决如下几个问题：</p><ol><li>背景图的还原</li><li>找到背景图中缺口的位置</li><li>将滑块拖拽到缺口</li></ol><a id="more"></a><h2 id="背景图的还原"><a href="#背景图的还原" class="headerlink" title="背景图的还原"></a>背景图的还原</h2><p><code>Geetest</code>背景图分为两张，一张是完整背景图，一张是带缺口的背景图。每张图片被分成<br>52 份， 上下两部分各 26 份，然后乱序排列。在网页上显示时，是通过<code>css</code>来将乱序的<br>碎片重新组列成完整的图片。</p><p>乱序图片：<img src="/images/posts/2017-11/9f9cff207.jpg" alt="origin_img"></p><p> 正常图片：<img src="/images/posts/2017-11/re_9f9cff207.jpg" alt="show_img"></p><p>因此，我们必须将原始的背景乱序图片切根据页面上的<code>css</code>样式将图片切割成 52 份，并<br>按照先后顺序拼接还原成正确的图片。需要使用到<code>java.awt.image.BufferedImage</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将Geetest打乱的图片还原，Geetest的原始背景图是分成52份碎片乱序组合的。目前是上下各26份，每份碎片图片宽10px， 高58px。</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image     原始背景图</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> locations 展示位置列表，数据结构：[&#123;x=-25, y=-58&#125;, ...]</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 顺序排列好的图片</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">recover</span><span class="params">(BufferedImage image, List&lt;Map&lt;String, Integer&gt;&gt; locations)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> per_image_with = <span class="number">10</span>;  <span class="comment">// 每张碎片图片的宽度</span></span><br><span class="line">    <span class="keyword">int</span> per_image_height = <span class="number">58</span>; <span class="comment">// 每张碎片图片的高度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;BufferedImage&gt; upperList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;BufferedImage&gt; downList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将原始图片裁剪成碎片</span></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Integer&gt; location : locations) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = location.get(<span class="string">"x"</span>);</span><br><span class="line">        <span class="keyword">int</span> y = location.get(<span class="string">"y"</span>);</span><br><span class="line">        <span class="keyword">if</span> (y == -<span class="number">58</span>) &#123;</span><br><span class="line">            upperList.add(image.getSubimage(abs(x), <span class="number">58</span>, per_image_with, per_image_height));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">            downList.add(image.getSubimage(abs(x), <span class="number">0</span>, per_image_with, per_image_height));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BufferedImage newImage = <span class="keyword">new</span> BufferedImage(upperList.size() * per_image_with, image.getHeight(), image.getType());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重绘图片的上半部分</span></span><br><span class="line">    <span class="keyword">int</span> x_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (BufferedImage bufferedImage : upperList) &#123;</span><br><span class="line">        Graphics graphics = newImage.getGraphics();</span><br><span class="line">        graphics.drawImage(bufferedImage, x_offset, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        x_offset += bufferedImage.getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重绘图片的下半部分</span></span><br><span class="line">    x_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (BufferedImage bufferedImage : downList) &#123;</span><br><span class="line">        Graphics graphics = newImage.getGraphics();</span><br><span class="line">        graphics.drawImage(bufferedImage, x_offset, <span class="number">58</span>, <span class="keyword">null</span>);</span><br><span class="line">        x_offset += bufferedImage.getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"还原图片耗时：&#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找到背景图中缺口的位置"><a href="#找到背景图中缺口的位置" class="headerlink" title="找到背景图中缺口的位置"></a>找到背景图中缺口的位置</h2><p> 正常图片： <img src="/images/posts/2017-11/re_9f9cff207.jpg" alt="正常图片"></p><p> 缺口图片： <img src="/images/posts/2017-11/qk_9f9cff207.jpg" alt=" 缺口图片"></p><p><code>Geetest</code>验证时，只需要将拼图块水平移动到正确的位置即可。因此通过上面两张图片比<br>对，发现我们只要找到缺口的<code>x</code>坐标即可。</p><p>这里我借用的参考内容的方法：两张原始图的大小都是相同的 260*116，那就通过两个<br>for 循环依次对比每个像素点的 RGB 值，如果相差超过 50 则就认为找到了缺口的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算验证图的缺口位置（x轴） 两张原始图的大小都是相同的260*116，那就通过两个for循环依次对比每个像素点的RGB值， 如果RGB三元素中有一个相差超过50则就认为找到了缺口的位置</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image1 图像1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> image2 图像2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 缺口的x坐标</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDiffX</span><span class="params">(BufferedImage image1, BufferedImage image2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; image1.getWidth(); x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; image1.getHeight(); y++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isSimilar(image1, image2, x, y)) &#123;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"图片对比耗时：&#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断image1, image2的[x, y]这一像素是否相似，如果该像素的RGB值相差都在50以内，则认为相似。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> image1   图像1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> image2   图像2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x_offset x坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y_offset y坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否相似</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimilar</span><span class="params">(BufferedImage image1, BufferedImage image2, <span class="keyword">int</span> x_offset, <span class="keyword">int</span> y_offset)</span> </span>&#123;</span><br><span class="line">    Color pixel1 = <span class="keyword">new</span> Color(image1.getRGB(x_offset, y_offset));</span><br><span class="line">    Color pixel2 = <span class="keyword">new</span> Color(image2.getRGB(x_offset, y_offset));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> abs(pixel1.getBlue() - pixel2.getBlue()) &lt; <span class="number">50</span> &amp;&amp; abs(pixel1.getGreen() - pixel2.getGreen()) &lt; <span class="number">50</span> &amp;&amp; abs(pixel1.getRed() - pixel2.getRed()) &lt; <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将滑块拖拽到缺口"><a href="#将滑块拖拽到缺口" class="headerlink" title="将滑块拖拽到缺口"></a>将滑块拖拽到缺口</h2><p><code>Geetest</code>在拖拽拼图块时，对拼图块的移动轨迹做了一些 “ 人工智能 ” 的算法识别，使<br>用程序直接将拼图块拖入缺口时，发现有很大的概率会被识别为机器操作，页面显示<code>怪物吃掉了饼图</code>。因此我们需要采用一些算法来模拟人拖拽的行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据缺口位置x_offset，仿照手动拖动滑块时的移动轨迹。</span></span><br><span class="line"><span class="comment">  * 手动拖动滑块有几个特点：</span></span><br><span class="line"><span class="comment">  * 开始时拖动速度快，最后接近目标时会慢下来；</span></span><br><span class="line"><span class="comment">  * 总时间大概1~3秒；</span></span><br><span class="line"><span class="comment">  * 有可能会拖超过后再拖回头；</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回一个轨迹数组，数组中的每个轨迹都是[x,y,z]三元素：x代表横向位移，y代表竖向位移，z代表时间间隔，单位毫秒</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; getTrack(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks;</span><br><span class="line">    <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际上滑块的起始位置并不是在图像的最左边，而是大概有6个像素的距离，所以滑动距离要减掉这个长度</span></span><br><span class="line">    x_offset = x_offset - <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (getRandom(<span class="number">0</span>, <span class="number">10</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        tracks = strategics_1(x_offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tracks = strategics_2(x_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"生成轨迹耗时: &#123;&#125;ms"</span>, System.currentTimeMillis() - begin);</span><br><span class="line">    log.debug(<span class="string">"计算出移动轨迹: &#123;&#125;"</span>, tracks);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 轨迹策略1</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; strategics_1(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">float</span> totalTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = getRandom(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机按1~3的步长生成各个点</span></span><br><span class="line">    <span class="keyword">while</span> (x_offset - x &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, x);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, <span class="number">0</span>);</span><br><span class="line">        tracks.add(point);</span><br><span class="line"></span><br><span class="line">        x_offset = x_offset - x;</span><br><span class="line">        x = getRandom(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后面几个点放慢时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x_offset; i++) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, <span class="number">1</span>);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">        tracks.add(point);</span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"预计拖拽耗时: &#123;&#125;ms"</span>, totalTime);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 轨迹策略2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, Integer&gt;&gt; strategics_2(<span class="keyword">int</span> x_offset) &#123;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt; tracks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">float</span> totalTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dragX = <span class="number">0</span>; <span class="comment">// 已拖拽的横向偏移量</span></span><br><span class="line">    <span class="keyword">int</span> nearRange = getRandom(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 靠近缺口的范围</span></span><br><span class="line">    <span class="keyword">while</span> (dragX &lt; x_offset - nearRange) &#123; <span class="comment">// 生成快速拖拽点，拖拽距离非常靠近切口</span></span><br><span class="line">        <span class="keyword">int</span> stepLength = getRandom(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// 随机按1~5的步长生成各个点</span></span><br><span class="line">        Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        point.put(<span class="string">"x"</span>, stepLength);</span><br><span class="line">        point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        point.put(<span class="string">"z"</span>, getRandom(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        tracks.add(point);</span><br><span class="line"></span><br><span class="line">        totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        dragX += stepLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机一定的比例将滑块拖拽过头</span></span><br><span class="line">    <span class="keyword">if</span> (getRandom(<span class="number">0</span>, <span class="number">99</span>) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> stepLength = getRandom(<span class="number">10</span>, <span class="number">15</span>); <span class="comment">// 随机按1~5的步长生成各个点</span></span><br><span class="line">        Map&lt;String, Integer&gt; attachPoint = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        attachPoint.put(<span class="string">"x"</span>, stepLength);</span><br><span class="line">        attachPoint.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">        attachPoint.put(<span class="string">"z"</span>, getRandom(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        tracks.add(attachPoint);</span><br><span class="line"></span><br><span class="line">        dragX += stepLength;</span><br><span class="line">        totalTime += attachPoint.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 精确点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.abs(dragX - x_offset); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dragX &gt; x_offset) &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">            point.put(<span class="string">"x"</span>, -<span class="number">1</span>);</span><br><span class="line">            point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">            point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">100</span>));</span><br><span class="line">            tracks.add(point);</span><br><span class="line"></span><br><span class="line">            totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; point = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">            point.put(<span class="string">"x"</span>, <span class="number">1</span>);</span><br><span class="line">            point.put(<span class="string">"y"</span>, <span class="number">0</span>);</span><br><span class="line">            point.put(<span class="string">"z"</span>, getRandom(<span class="number">10</span>, <span class="number">100</span>));</span><br><span class="line">            tracks.add(point);</span><br><span class="line"></span><br><span class="line">            totalTime += point.get(<span class="string">"z"</span>).floatValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"预计拖拽耗时: &#123;&#125;ms"</span>, totalTime);</span><br><span class="line">    <span class="keyword">return</span> tracks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据移动轨迹，模拟拖动极验的验证滑块</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">simulateDrag</span><span class="params">(WebDriver webDriver, Site site, List&lt;Map&lt;String, Integer&gt;&gt; tracks)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"开始模拟拖动滑块"</span>);</span><br><span class="line"></span><br><span class="line">    WebElement slider = webDriver.findElement(By.cssSelector(site.getGeetest().getSliderKnob()));</span><br><span class="line">    log.debug(<span class="string">"滑块初始位置: &#123;&#125;"</span>, slider.getLocation());</span><br><span class="line"></span><br><span class="line">    Actions actions = <span class="keyword">new</span> Actions(webDriver);</span><br><span class="line">    actions.clickAndHold(slider).perform();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, Integer&gt; point : tracks) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = point.get(<span class="string">"x"</span>) + <span class="number">22</span>;</span><br><span class="line">        <span class="keyword">int</span> y = point.get(<span class="string">"y"</span>) + <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">        actions.moveToElement(slider, x, y).perform();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> z = point.get(<span class="string">"z"</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(getRandom(<span class="number">100</span>, <span class="number">200</span>)); <span class="comment">// 随机停顿100~200毫秒</span></span><br><span class="line">    actions.release(slider).perform();</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>); <span class="comment">// 等待0.1秒后检查结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 在5秒之内检查弹出框是否消失，如果消失则说明校验通过；如果没有消失说明校验失败。</span></span><br><span class="line">        <span class="keyword">new</span> WebDriverWait(webDriver, <span class="number">5</span>).until((ExpectedCondition&lt;Boolean&gt;) driver -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                WebElement popupElement = driver.findElement(By.cssSelector(site.getGeetest().getPopupWrap()));</span><br><span class="line">                <span class="keyword">return</span> !popupElement.isDisplayed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 元素不存在也返回true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决好上面的三点之后，<code>Geetest</code>验证基本就破解掉了，但是要爬取<code>企业信用信息公示系统</code>中的数据还有一些事情要做。目前工商局有多个地区系统，每个系统的页面解析处理也不一样。某些地区系统甚至还针对访问频次做了控制，你可以通过 IP 代理来解决。</p><p>完整的代码示例请参考: <a href="https://github.com/aqlu/geetest-crack" target="_blank" rel="noopener">https://github.com/aqlu/geetest-crack</a></p><p>运行效果：<img src="http://obbrvjuch.bkt.clouddn.com/blog/posts/2017-11/Kapture.gif" alt="效果图"></p><p>本文的参考资料：<a href="http://blog.csdn.net/paololiu/article/details/52514504" target="_blank" rel="noopener">http://blog.csdn.net/paololiu/article/details/52514504</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中有个需求希望能获取公司的工商注册信息，刚开始是想与第三方数据公司合作，因种&lt;br&gt;种原因合作没有达成。于是想做个爬虫直接从工商局的《企业信用信息公示系统》中获取。&lt;br&gt;要想从《企业信用信息公示系统》中爬取数据，首先必须解决掉&lt;code&gt;Geetest&lt;/code&gt;验证码的问题。&lt;br&gt;经过一系列的摸索，发现要想破解&lt;code&gt;geetest&lt;/code&gt;的验证码，主要需要解决如下几个问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;背景图的还原&lt;/li&gt;&lt;li&gt;找到背景图中缺口的位置&lt;/li&gt;&lt;li&gt;将滑块拖拽到缺口&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="geetest" scheme="http://zyouwei.com/tags/geetest/"/>
    
      <category term="验证码破解" scheme="http://zyouwei.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>MacOS科学上网</title>
    <link href="http://zyouwei.com/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/MacOs-scientific-Surf-the-Internet.html"/>
    <id>http://zyouwei.com/技术笔记/工具类/MacOs-scientific-Surf-the-Internet.html</id>
    <published>2017-11-21T07:07:27.000Z</published>
    <updated>2017-11-21T10:00:54.990Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在MacOS上采用<a href="https://www.v2ray.com/chapter_04/03_vmess.html" target="_blank" rel="noopener">VMess</a>协议与<code>墙外VPS</code>通信，其中主要用到了[v2ray]这款开源工具。</p><h2 id="服务端安装-Centos"><a href="#服务端安装-Centos" class="headerlink" title="服务端安装(Centos)"></a>服务端安装(Centos)</h2><p>因为我选择的VPS的Centos的操作系统，所以此章节主要基于Centos操作系统来描述。</p><ol><li>安装包下载：<code>wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-linux-64.zip</code></li><li>解压安装包到<code>/opt</code>目录：<code>unzip v2ray-linux-64.zip -d /opt</code></li><li><p>编写配置文件:</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/v2ray-v2.40-linux-64</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure><p> config.json内容：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"log"</span> : &#123; <span class="comment">// 日志输出配置</span></span><br><span class="line">        <span class="string">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">        <span class="string">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">        <span class="string">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对外提供 vmess 协议</span></span><br><span class="line">    <span class="string">"inbound"</span>: &#123;</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">28399</span>,  <span class="comment">// 监听端口</span></span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"clients"</span>: [&#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"3b129ddd-72a3-4d28-aeee-028a0fe86e33"</span>, <span class="comment">// 可以随机生成一个，但必须保证服务端ID与客户端ID必须保持一致</span></span><br><span class="line">                <span class="string">"level"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">                <span class="string">"security"</span>: <span class="string">"aes-128-gcm"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"outbound"</span>: &#123;</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"routing"</span>: &#123;</span><br><span class="line">        <span class="string">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"rules"</span>: [&#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">                <span class="string">"ip"</span>: [</span><br><span class="line">                    <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">                    <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">                    <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">                    <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">                    <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">                    <span class="string">"::1/128"</span>,</span><br><span class="line">                    <span class="string">"fc00::/7"</span>,</span><br><span class="line">                    <span class="string">"fe80::/10"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动<code>v2ray</code>服务：<code>/opt/v2ray-v2.40-linux-64/v2ray -config=/opt/v2ray-v2.40-linux-64/config.json &gt; v2ray.log &amp;</code></p></li></ol><h2 id="客户端安装-MacOs"><a href="#客户端安装-MacOs" class="headerlink" title="客户端安装(MacOs)"></a>客户端安装(MacOs)</h2><ol><li>安装包下载：<code>wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-macos.zip</code></li><li>解压安装包到<code>/usr/local/opt</code>目录：<code>unzip v2ray-linux-64.zip -d /usr/local/opt</code></li><li><p>编写配置文件:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/v2ray-v2.40-linux-64</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure><p> config.json内容：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"log"</span> : &#123;</span><br><span class="line">        <span class="string">"access"</span>: <span class="string">"/var/log/v2ray/access.log"</span>,</span><br><span class="line">        <span class="string">"error"</span>: <span class="string">"/var/log/v2ray/error.log"</span>,</span><br><span class="line">        <span class="string">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对外提供 socks5 协议</span></span><br><span class="line">    <span class="string">"inbound"</span>: &#123;</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">1080</span>, <span class="comment">// 监听端口</span></span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"socks"</span>, <span class="comment">// 入口协议为 SOCKS 5</span></span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"auth"</span>: <span class="string">"noauth"</span>  <span class="comment">//socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"outbound"</span>: &#123;</span><br><span class="line">        <span class="string">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 出口协议，对应服务端的入口协议</span></span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"vnext"</span>: [&#123;</span><br><span class="line">                <span class="string">"address"</span>: <span class="string">"serveraddr.com"</span>, <span class="comment">// 服务器地址，请修改为你自己的服务器 ip 或域名</span></span><br><span class="line">                <span class="string">"port"</span>: <span class="number">28399</span>,  <span class="comment">// 服务器端口，对应服务器端入口的端口</span></span><br><span class="line">                <span class="string">"users"</span>: [&#123;</span><br><span class="line">                    <span class="string">"id"</span>: <span class="string">"3b129ddd-72a3-4d28-aeee-028a0fe86e33"</span>, <span class="comment">// 用户ID, 服务端ID与客户端ID必须保持一致</span></span><br><span class="line">                    <span class="string">"alterId"</span>: <span class="number">64</span> <span class="comment">// 此处的值也应当与服务器相同</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"routing"</span>: &#123;</span><br><span class="line">        <span class="string">"strategy"</span>: <span class="string">"rules"</span>,</span><br><span class="line">        <span class="string">"settings"</span>: &#123;</span><br><span class="line">            <span class="string">"rules"</span>: [&#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">                <span class="string">"ip"</span>: [</span><br><span class="line">                    <span class="string">"0.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"10.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"100.64.0.0/10"</span>,</span><br><span class="line">                    <span class="string">"127.0.0.0/8"</span>,</span><br><span class="line">                    <span class="string">"169.254.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"172.16.0.0/12"</span>,</span><br><span class="line">                    <span class="string">"192.0.0.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.0.2.0/24"</span>,</span><br><span class="line">                    <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"198.18.0.0/15"</span>,</span><br><span class="line">                    <span class="string">"198.51.100.0/24"</span>,</span><br><span class="line">                    <span class="string">"203.0.113.0/24"</span>,</span><br><span class="line">                    <span class="string">"::1/128"</span>,</span><br><span class="line">                    <span class="string">"fc00::/7"</span>,</span><br><span class="line">                    <span class="string">"fe80::/10"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动<code>v2ray</code>服务：<code>/usr/local/opt/v2ray-v2.40-linux-64/v2ray -config=/usr/local/opt/v2ray-v2.40-linux-64/config.json &gt; v2ray.log &amp;</code></p></li></ol><h2 id="客户端安装的另一种方式（基于Docker安装）"><a href="#客户端安装的另一种方式（基于Docker安装）" class="headerlink" title="客户端安装的另一种方式（基于Docker安装）"></a>客户端安装的另一种方式（基于Docker安装）</h2><ol><li>下载镜像： <code>docker pull v2ray/official</code></li><li><p>编写配置文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/v2ray</span><br><span class="line"><span class="built_in">cd</span> ~/v2ray</span><br><span class="line">vi config.json <span class="comment"># 内容请参考客户端安装(MacOs)</span></span><br></pre></td></tr></table></figure></li><li><p>创建容器：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name v2ray -v ~/v2ray:/etc/v2ray -p 1080:1080 v2ray/official v2ray -config=/etc/v2ray/config.json</span><br></pre></td></tr></table></figure><blockquote><p><code>-p</code> 后面跟的端口为<code>config.json</code>中<code>inbound</code>配置的监听端口</p></blockquote></li><li>校验容器是否创建成功：<code>docker container ls</code></li><li>启动容器：<code>docker start</code></li><li>停止v2ray：<code>docker stop v2ray</code></li><li>重启v2ray：<code>docker restart v2ray</code></li><li>查看日志：<code>docker container log  v2ray</code></li></ol><h2 id="更多参考资料"><a href="#更多参考资料" class="headerlink" title="更多参考资料"></a>更多参考资料</h2><ul><li>项目：<a href="https://github.com/v2ray/v2ray-core" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core</a></li><li>用户手册：<a href="https://www.v2ray.com/" target="_blank" rel="noopener">https://www.v2ray.com/</a></li><li>其它文档：<a href="https://toutyrater.github.io/" target="_blank" rel="noopener">https://toutyrater.github.io/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍如何在MacOS上采用&lt;a href=&quot;https://www.v2ray.com/chapter_04/03_vmess.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VMess&lt;/a&gt;协议与&lt;code&gt;墙外VPS&lt;/code&gt;通信，其中主要用到了[v2ray]这款开源工具。&lt;/p&gt;&lt;h2 id=&quot;服务端安装-Centos&quot;&gt;&lt;a href=&quot;#服务端安装-Centos&quot; class=&quot;headerlink&quot; title=&quot;服务端安装(Centos)&quot;&gt;&lt;/a&gt;服务端安装(Centos)&lt;/h2&gt;&lt;p&gt;因为我选择的VPS的Centos的操作系统，所以此章节主要基于Centos操作系统来描述。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;安装包下载：&lt;code&gt;wget https://github.com/v2ray/v2ray-core/releases/download/v2.40/v2ray-linux-64.zip&lt;/code&gt;&lt;/li&gt;&lt;li&gt;解压安装包到&lt;code&gt;/opt&lt;/code&gt;目录：&lt;code&gt;unzip v2ray-linux-64.zip -d /opt&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编写配置文件:&lt;/p&gt;
    
    </summary>
    
      <category term="技术笔记" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://zyouwei.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="vmess" scheme="http://zyouwei.com/tags/vmess/"/>
    
      <category term="翻墙" scheme="http://zyouwei.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://zyouwei.com//hello-world.html"/>
    <id>http://zyouwei.com//hello-world.html</id>
    <published>2017-11-21T04:35:00.000Z</published>
    <updated>2017-11-21T09:11:42.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>这是我的第一篇博客，感谢<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>提供了一个简单好用的博客框架，感谢<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>优雅的的主题。</p><p>此博客是<a href="./about/index.html">本人</a>的一个杂记。为什么叫杂记？其实就是一些乱七八糟的东西，可能是曾经的一些技术笔记，也可能是一些技术专题的连载，也可能是一些生活观点与琐事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;Hello World!&lt;/h2&gt;&lt;p&gt;这是我的第一篇博客，感谢&lt;a href=&quot;https://hex
      
    
    </summary>
    
    
  </entry>
  
</feed>
